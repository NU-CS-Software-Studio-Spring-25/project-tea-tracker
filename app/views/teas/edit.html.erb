<% content_for :title, "Edit #{@tea.name} - Tea Tracker" %>

<h1>Edit Tea</h1>

<% if @tea.errors.any? %>
  <div id="error-modal" class="alert alert-danger" role="alert" aria-live="assertive">
    <h2>There were errors with your submission:</h2>
    <ul>
      <% @tea.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>

<style>
  .required-field label::after {
    content: " *";
    color: #dc3545;
    font-weight: bold;
  }
  
  .form-text.required-hint {
    color: #dc3545;
    font-size: 0.875rem;
    margin-bottom: 1rem;
  }
  
  input:required:invalid,
  select:required:invalid,
  textarea:required:invalid {
    border-left: 3px solid #dc3545;
  }
  
  input:required:valid,
  select:required:valid,
  textarea:required:valid {
    border-left: 3px solid #28a745;
  }
</style>

<div class="form-text required-hint mb-3">Fields marked with * are required</div>

<%= form_with model: @tea, local: true do |form| %>
  <div class="form-group required-field">
    <%= form.label :name, class: "form-label" %>
    <%= form.text_field :name, required: true, class: "form-control", maxlength: 100, 
        "aria-describedby": "name-help" %>
    <div id="name-help" class="form-text">Enter the name of your tea</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :category, class: "form-label" %>
    <%= form.text_field :category, 
                      required: true, 
                      class: "form-control", 
                      list: "tea-categories", 
                      placeholder: "Choose from suggestions or enter your own custom category",
                      "aria-describedby": "category-help" %>
    <datalist id="tea-categories">
      <% Tea::CANONICAL_CATEGORIES.each do |cat| %>
        <option value="<%= cat %>"><%= cat.humanize %></option>
      <% end %>
    </datalist>
    <div id="category-help" class="form-text">Select from common types or enter your own custom tea variety</div>
  </div>

  <fieldset class="form-group required-field">
    <legend class="sr-only">Price Information</legend>
    <div class="row">
      <div class="col">
        <%= form.label :price, "Price per Gram ($/g)", class: "form-label" %>
        <%= form.number_field :price, step: 0.01, class: "form-control", id: "direct-price", 
            min: 0.01, max: 999.99, required: true, "aria-describedby": "price-help" %>
        <div id="price-help" class="form-text">Price per gram in USD</div>
      </div>
      <div class="col required-field">
        <%= form.label :total_price, "Total Price ($)", class: "form-label" %>
        <%= form.number_field :total_price, step: 0.01, class: "form-control", id: "total-price", 
            min: 0.01, max: 9999.99, required: true, "aria-describedby": "total-price-help" %>
        <div id="total-price-help" class="form-text">Total amount paid</div>
      </div>
      <div class="col required-field">
        <%= form.label :weight, "Weight (g)", class: "form-label" %>
        <%= form.number_field :weight, step: 0.01, class: "form-control", id: "weight", 
            min: 0.01, max: 9999.99, required: true, "aria-describedby": "weight-help" %>
        <div id="weight-help" class="form-text">Weight in grams</div>
      </div>
    </div>
  </fieldset>

  <div class="form-group required-field">
    <%= form.label :vendor, class: "form-label" %>
    <%= form.text_field :vendor, class: "form-control", maxlength: 100, required: true,
        "aria-describedby": "vendor-help" %>
    <div id="vendor-help" class="form-text">Store or company selling the tea</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :known_for, class: "form-label" %>
    <%= form.text_field :known_for, class: "form-control", maxlength: 200, required: true,
        "aria-describedby": "known-for-help" %>
    <div id="known-for-help" class="form-text">What makes this tea special?</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :year, class: "form-label" %>
    <%= form.number_field :year, step: 1, class: "form-control", min: 1800, max: Date.current.year, 
        required: true, "aria-describedby": "year-help" %>
    <div id="year-help" class="form-text">Year the tea was produced (1800-present)</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :region, class: "form-label" %>
    <%= form.text_field :region, class: "form-control", maxlength: 100, required: true,
        "aria-describedby": "region-help" %>
    <div id="region-help" class="form-text">Region where the tea was grown</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :ship_from, class: "form-label" %>
    <%= form.text_field :ship_from, class: "form-control", maxlength: 100, required: true,
        "aria-describedby": "ship-from-help" %>
    <div id="ship-from-help" class="form-text">Country or location the tea ships from</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :popularity, class: "form-label" %>
    <%= form.number_field :popularity, step: 1, class: "form-control", min: 0, max: 100, 
        required: true, placeholder: "0-100", "aria-describedby": "popularity-help" %>
    <div id="popularity-help" class="form-text">How popular is this tea? (0-100)</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :shopping_platform, class: "form-label" %>
    <%= form.text_field :shopping_platform, class: "form-control", maxlength: 100, required: true,
        "aria-describedby": "platform-help" %>
    <div id="platform-help" class="form-text">Website or platform where you bought the tea</div>
  </div>

  <div class="form-group required-field">
    <%= form.label :product_url, class: "form-label" %>
    <%= form.url_field :product_url, class: "form-control", maxlength: 500, required: true, 
        pattern: "https?://.+", "aria-describedby": "url-help" %>
    <div id="url-help" class="form-text">Direct link to the product page (must start with http:// or https://)</div>
  </div>

  <div class="form-group">
    <%= form.label :rank, "Rank", class: "form-label" %>
    <div class="form-control-plaintext" aria-describedby="rank-help"><%= @entry.rank %></div>
    <div id="rank-help" class="form-text">Current ranking in your collection</div>
  </div>

  <div class="mt-3">
    <%= link_to "Back", tea_path(@tea), class: "btn btn-secondary" %>
    <%= form.submit "Update Tea", class: "btn btn-primary" %>
  </div>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Hide the error modal after 5 seconds
  const errorModal = document.getElementById('error-modal');
  if (errorModal) {
    setTimeout(() => {
      errorModal.style.display = 'none';
    }, 5000); // 5000ms = 5 seconds
  }

  // Existing JavaScript for price and weight validation
  const directPriceInput = document.getElementById('direct-price');
  const totalPriceInput = document.getElementById('total-price');
  const weightInput = document.getElementById('weight');

  function calculatePricePerGram() {
    const totalPrice = parseFloat(totalPriceInput.value) || 0;
    const weight = parseFloat(weightInput.value) || 0;
    if (weight > 0) {
      const pricePerGram = totalPrice / weight;
      directPriceInput.value = pricePerGram.toFixed(2);
    }
  }

  function clearTotalAndWeight() {
    totalPriceInput.value = '';
    weightInput.value = '';
  }

  totalPriceInput.addEventListener('input', calculatePricePerGram);
  weightInput.addEventListener('input', calculatePricePerGram);
  directPriceInput.addEventListener('input', clearTotalAndWeight);

  // Ensure price and weight are at least 0.01
  directPriceInput.addEventListener('input', function() {
    if (parseFloat(directPriceInput.value) < 0.01) {
      directPriceInput.value = 0.01;
    }
  });

  weightInput.addEventListener('input', function() {
    if (parseFloat(weightInput.value) < 0.01) {
      weightInput.value = 0.01;
    }
  });
  
  // Enhanced validation for all required fields
  document.querySelectorAll('input[required], select[required], textarea[required]').forEach(field => {
    // Add feedback div after each field if it doesn't exist
    if (!field.nextElementSibling || !field.nextElementSibling.classList.contains('invalid-feedback')) {
      const feedbackDiv = document.createElement('div');
      feedbackDiv.className = 'invalid-feedback';
      feedbackDiv.setAttribute('role', 'alert');
      field.parentNode.insertBefore(feedbackDiv, field.nextElementSibling);
    }
    
    field.addEventListener('blur', function() {
      // Reset field status
      this.classList.remove('is-invalid', 'is-valid');
      
      // Find the feedback div
      const feedbackDiv = this.nextElementSibling.classList.contains('invalid-feedback') 
        ? this.nextElementSibling 
        : this.parentNode.querySelector('.invalid-feedback');
      
      if (!feedbackDiv) return;
      
      // Check validity and show appropriate message
      if (!this.validity.valid) {
        this.classList.add('is-invalid');
        this.setAttribute('aria-invalid', 'true');
        
        if (this.validity.valueMissing) {
          feedbackDiv.textContent = `${this.labels[0].textContent.replace(' *', '')} is required`;
        } else if (this.validity.tooShort) {
          feedbackDiv.textContent = `${this.labels[0].textContent.replace(' *', '')} must be at least ${this.minLength} characters`;
        } else if (this.validity.tooLong) {
          feedbackDiv.textContent = `${this.labels[0].textContent.replace(' *', '')} must be at most ${this.maxLength} characters`;
        } else if (this.validity.typeMismatch) {
          if (this.type === 'url') {
            feedbackDiv.textContent = 'Please enter a valid URL (must start with http:// or https://)';
          } else if (this.type === 'email') {
            feedbackDiv.textContent = 'Please enter a valid email address';
          } else {
            feedbackDiv.textContent = `Please enter a valid ${this.type}`;
          }
        } else if (this.validity.rangeUnderflow) {
          feedbackDiv.textContent = `${this.labels[0].textContent.replace(' *', '')} must be at least ${this.min}`;
        } else if (this.validity.rangeOverflow) {
          feedbackDiv.textContent = `${this.labels[0].textContent.replace(' *', '')} must be at most ${this.max}`;
        } else if (this.validity.patternMismatch) {
          if (this.id === 'product_url') {
            feedbackDiv.textContent = 'Product URL must start with http:// or https://';
          } else {
            feedbackDiv.textContent = `${this.labels[0].textContent.replace(' *', '')} has an invalid format`;
          }
        } else if (this.validity.stepMismatch) {
          feedbackDiv.textContent = `${this.labels[0].textContent.replace(' *', '')} must be in steps of ${this.step}`;
        } else {
          feedbackDiv.textContent = 'Please enter a valid value';
        }
      } else {
        this.classList.add('is-valid');
        this.setAttribute('aria-invalid', 'false');
        feedbackDiv.textContent = '';
      }
    });
    
    // Also validate on input for immediate feedback
    field.addEventListener('input', function() {
      if (this.classList.contains('is-invalid')) {
        // Re-validate on input if it was previously invalid
        const event = new Event('blur');
        this.dispatchEvent(event);
      }
    });
  });
  
  // Custom validation for year field
  const yearField = document.querySelector('input[name="tea[year]"]');
  if (yearField) {
    yearField.addEventListener('blur', function() {
      const year = parseInt(this.value);
      const currentYear = new Date().getFullYear();
      
      if (year > currentYear) {
        this.classList.add('is-invalid');
        this.setAttribute('aria-invalid', 'true');
        const feedbackDiv = this.nextElementSibling.classList.contains('invalid-feedback') 
          ? this.nextElementSibling 
          : this.parentNode.querySelector('.invalid-feedback');
        
        if (feedbackDiv) {
          feedbackDiv.textContent = `Year cannot be in the future (max: ${currentYear})`;
        }
      }
    });
  }
  
  // Custom validation for URL field
  const urlField = document.querySelector('input[name="tea[product_url]"]');
  if (urlField) {
    urlField.addEventListener('blur', function() {
      if (this.value && !this.value.match(/^https?:\/\/.+/)) {
        this.classList.add('is-invalid');
        this.setAttribute('aria-invalid', 'true');
        const feedbackDiv = this.nextElementSibling.classList.contains('invalid-feedback') 
          ? this.nextElementSibling 
          : this.parentNode.querySelector('.invalid-feedback');
        
        if (feedbackDiv) {
          feedbackDiv.textContent = 'Product URL must start with http:// or https://';
        }
      }
    });
  }
});
</script>