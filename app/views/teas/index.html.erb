<div class="container-fluid py-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Your Tea Collection</h1>
    <div>
      <%= link_to "Add New Tea", new_tea_path, class: "btn btn-success" %>
      <%= link_to "Back to Dashboard", root_path, class: "btn btn-outline-secondary" %>
    </div>
  </div>
  
  <!-- Filters and Search -->
  <div class="card shadow-sm mb-4">
    <div class="card-body">
      <%= form_with url: teas_path, method: :get, class: "row g-3", local: true do |form| %>
        <div class="col-md-3">
          <%= form.label :category, "Category", class: "form-label" %>
          <%= form.select :category, 
              options_for_select([["All Categories", ""]] + @tea_categories.map { |c| [c, c] }, params[:category]), 
              {}, class: "form-select" %>
        </div>
        
        <div class="col-md-3">
          <%= form.label :sort, "Sort By", class: "form-label" %>
          <%= form.select :sort, 
              options_for_select([
                ["Newest First", "created_at_desc"],
                ["Oldest First", "created_at_asc"],
                ["Name (A-Z)", "name_asc"],
                ["Highest Rank", "rank_desc"],
                ["Lowest Price", "price_asc"],
                ["Highest Price", "price_desc"]
              ], params[:sort] || "created_at_desc"), 
              {}, class: "form-select" %>
        </div>
        
        <div class="col-md-4">
          <%= form.label :search, "Search", class: "form-label" %>
          <%= form.text_field :search, value: params[:search], placeholder: "Search by name, vendor, or origin...", class: "form-control" %>
        </div>
        
        <div class="col-md-2 d-flex align-items-end">
          <%= form.submit "Apply Filters", class: "btn btn-primary w-100" %>
        </div>
      <% end %>
    </div>
  </div>
  
  <!-- Ranking Instructions -->
  <div class="alert alert-info mb-4">
    <i class="bi bi-info-circle me-2"></i>
    Drag and drop teas to change their ranking. Higher ranked teas appear at the top.
  </div>
  
  <!-- Tea Collection Grid with Drag and Drop -->
  <div id="tea-ranking-container" class="row">
    <% if @teas.any? %>
      <% @teas.each do |tea| %>
        <div class="col-md-4 col-lg-3 mb-4 tea-rank-item" data-tea-id="<%= tea.id %>" draggable="true">
          <div class="card h-100 shadow-sm tea-card">
            <div class="card-header bg-light">
              <div class="d-flex align-items-center">
                <div class="drag-handle me-2">
                  <i class="bi bi-grip-vertical"></i>
                </div>
                <div class="flex-grow-1">
                  <span class="badge bg-<%= tea_category_color(tea.category) %> float-end"><%= tea.category %></span>
                  <h5 class="card-title mb-0 text-truncate"><%= tea.name %></h5>
                </div>
              </div>
            </div>
            <div class="card-body">
              <div class="mb-3">
                <small class="text-muted">Vendor:</small>
                <p class="mb-0"><%= tea.vendor %></p>
              </div>
              
              <div class="mb-3">
                <small class="text-muted">Origin:</small>
                <p class="mb-0"><%= tea.ship_from %></p>
              </div>
              
              <div class="d-flex justify-content-between">
                <div>
                  <small class="text-muted">Rank:</small>
                  <p class="mb-0 current-rank"><%= current_user.entries.find_by(tea: tea)&.rank || "N/A" %></p>
                </div>
                <div>
                  <small class="text-muted">Price:</small>
                  <p class="mb-0"><%= number_to_currency(tea.price) || "N/A" %>/g</p>
                </div>
              </div>
            </div>
            <div class="card-footer bg-white border-top-0">
              <div class="d-grid">
                <%= link_to "View Details", tea_path(tea), class: "btn btn-outline-primary" %>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    <% else %>
      <div class="col-12 text-center py-5">
        <i class="bi bi-cup" style="font-size: 4rem;"></i>
        <h3 class="mt-3">No teas found</h3>
        <p class="text-muted">Try adjusting your filters or add some teas to your collection.</p>
        <%= link_to "Add Your First Tea", new_tea_path, class: "btn btn-success mt-2" %>
      </div>
    <% end %>
  </div>
  
  <!-- Pagination -->
  <% if @teas.respond_to?(:total_pages) %>
    <div class="d-flex justify-content-center mt-4">
      <%= paginate @teas %>
    </div>
  <% end %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  initDragAndDrop();
});

function initDragAndDrop() {
  const container = document.getElementById('tea-ranking-container');
  if (!container) return;
  
  const items = container.querySelectorAll('.tea-rank-item');
  let draggedItem = null;
  
  // Add event listeners to each item
  items.forEach(item => {
    // Drag start
    item.addEventListener('dragstart', function(e) {
      draggedItem = this;
      setTimeout(() => {
        this.classList.add('dragging');
      }, 0);
    });
    
    // Drag end
    item.addEventListener('dragend', function() {
      this.classList.remove('dragging');
      draggedItem = null;
      updateRanks();
    });
    
    // Drag over
    item.addEventListener('dragover', function(e) {
      e.preventDefault();
      if (this === draggedItem) return;
      
      const mouseY = e.clientY;
      const mouseX = e.clientX;
      
      // Find the closest item to the mouse position
      const closestItem = findClosestItem(mouseX, mouseY, items, draggedItem);
      
      if (closestItem) {
        const rect = closestItem.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        
        // Determine if we should insert before or after the closest item
        if (mouseY < centerY || (mouseY === centerY && mouseX < centerX)) {
          container.insertBefore(draggedItem, closestItem);
        } else {
          container.insertBefore(draggedItem, closestItem.nextSibling);
        }
      }
    });
    
    // Prevent default behavior for drop
    item.addEventListener('drop', function(e) {
      e.preventDefault();
    });
  });
  
  // Function to find the closest item to the mouse position
  function findClosestItem(x, y, items, excludeItem) {
    let closestItem = null;
    let closestDistance = Infinity;
    
    items.forEach(item => {
      if (item === excludeItem) return;
      
      const rect = item.getBoundingClientRect();
      const centerX = rect.left + rect.width / 2;
      const centerY = rect.top + rect.height / 2;
      
      // Calculate distance using Pythagorean theorem
      const distance = Math.sqrt(
        Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)
      );
      
      if (distance < closestDistance) {
        closestDistance = distance;
        closestItem = item;
      }
    });
    
    return closestItem;
  }
  
  // Function to update ranks after drag
  function updateRanks() {
    const teaItems = container.querySelectorAll('.tea-rank-item');
    const totalItems = teaItems.length;
    const teaRanks = {};
    
    // Assign ranks based on position (top item gets highest rank)
    teaItems.forEach((item, index) => {
      const teaId = item.dataset.teaId;
      const rank = totalItems - index; // Highest rank at the top
      teaRanks[teaId] = rank;
      
      // Update the displayed rank
      const rankElement = item.querySelector('.current-rank');
      if (rankElement) {
        rankElement.textContent = rank;
      }
    });
    
    // Send the updated ranks to the server
    fetch('/teas/update_ranks', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ tea_ranks: teaRanks })
    })
    .then(response => {
      if (!response.ok) {
        console.error('Failed to update ranks');
      }
    })
    .catch(error => {
      console.error('Error updating ranks:', error);
    });
  }
}
</script>