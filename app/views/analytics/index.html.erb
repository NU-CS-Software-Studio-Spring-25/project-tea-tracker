<div class="container-fluid py-4">
  <!-- Add required CSS and JS libraries -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
  
  <!-- Theme Styles -->
  <style>
    :root {
      --chart-text-color: #333333;
      --font-pixel: 'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace;
    }
    
    /* Theme Styles */
    body.theme-dark .text-muted {
      color: #a0aec0 !important;
    }
    
    /* Dark Theme */
    body.theme-dark {
      background-color: #1e272e;
      color: #dcdde1;
    }
    
    body.theme-dark .card {
      background-color: #2f3640;
      border-color: #353b48;
      color: #dcdde1;
    }

    body.theme-dark .card-header {
      background-color: #353b48;
      color: #f5f6fa;
      border-bottom: 1px solid #444;
    }
    
    body.theme-dark .text-muted {
      color: #a4b0be !important;
    }
    
    body.theme-dark .progress-bar {
      background-color: #487eb0 !important;
    }
    
    /* Pastel Theme */
    body.theme-pastel {
      background-color: #f8f9fa;
      color: #5a6268;
    }

    body.theme-pastel .card {
      background-color: #ffffff;
      border-color: #e9ecef;
      color: #4b0082;
    }

    body.theme-pastel .card-header {
      background-color: #e6e6fa;
      color: #4b0082;
      border-bottom: 1px solid #d8bfd8;
    }
    
    /* Vivid Theme */
    body.theme-vivid {
      background-color: #ffffff;
      color: #212529;
    }
    
    body.theme-vivid .card {
      background-color: #ffffff;
      border-color: #dee2e6;
      color: #212529;
    }
    
    body.theme-vivid .card-header {
      background-color: #007bff;
      color: #ffffff;
      border-bottom: 1px solid #0056b3;
    }
    
    /* Default theme */
    .card-header {
      color: #212529 !important;
    }
    
    /* Map specific styles */
    .leaflet-container {
      height: 100%;
      width: 100%;
      border-radius: 8px;
    }
    
    /* Custom tooltip styles */
    .custom-tooltip {
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid #ccc;
      border-radius: 4px;
      padding: 8px 12px;
      font-size: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
      max-width: 200px;
    }
    
    /* Stats cards */
    .stats-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 15px;
      padding: 20px;
      color: white;
      text-align: center;
      margin-bottom: 20px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      transition: transform 0.3s ease;
    }
    
    .stats-card:hover {
      transform: translateY(-5px);
    }
    
    .stats-card.bg-success {
      background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }
    
    .stats-card.bg-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .stats-card.bg-warning {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }
    
    .stats-card.bg-info {
      background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }
    
    .stats-value {
      font-size: 2.5rem;
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .stats-label {
      font-size: 0.9rem;
      opacity: 0.9;
      margin: 0;
    }
    
    /* Control buttons */
    .control-btn-group {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      justify-content: center;
    }
    
    .control-btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 10px 20px;
      border: none;
      border-radius: 25px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    .control-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0,0,0,0.15);
      color: white;
      text-decoration: none;
    }
    
    .control-btn.active {
      background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }
    
    /* Share button styles */
    .share-chart-btn, .retro-share-btn {
      transition: all 0.2s ease;
    }
    
    .share-chart-btn:hover, .retro-share-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Retro card styles */
    .retro-card {
      background: #ffffff;
      border: 2px solid #dee2e6;
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      transition: transform 0.3s ease;
    }
    
    .retro-card:hover {
      transform: translateY(-2px);
    }
    
    .retro-share-btn {
      display: inline-flex;
      align-items: center;
      gap: 5px;
      padding: 5px 10px;
      border: 1px solid #dee2e6;
      border-radius: 5px;
      background: #f8f9fa;
      color: #495057;
      text-decoration: none;
      font-size: 0.875rem;
      transition: all 0.2s ease;
    }
    
    .retro-share-btn:hover {
      background: #e9ecef;
      color: #495057;
      text-decoration: none;
    }
    
    /* Gradient text */
    .gradient-text {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-weight: bold;
    }
    
    /* Transition effects */
    body, .card, .card-header {
      transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }
    
    /* Custom font loading */
    @import url('https://fonts.googleapis.com/css2?family=Jersey+20&family=VT323&family=Silkscreen:wght@400;700&family=Pixelify+Sans&display=swap');
  </style>

  <h1 class="mt-3 mb-4 text-center gradient-text">Tea Collection Analytics</h1>
  
  <div class="analytics-controls mb-4">
    <div class="row justify-content-center">
      <div class="col-md-auto">
        <div class="control-btn-group">
          <button id="toggleCustomizePanel" class="control-btn customize-btn">
            <i class="bi bi-palette"></i>
            <span>Customize</span>
          </button>
          
          <button id="shareDashboardBtn" class="control-btn share-btn">
            <i class="bi bi-share"></i>
            <span>Share</span>
          </button>
          
          <%= link_to root_path, class: "control-btn back-btn" do %>
            <i class="bi bi-house"></i>
            <span>Back to Home</span>
          <% end %>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Customization Panel -->
  <div id="customizePanel" class="card shadow-sm mb-4" style="display: none;">
    <div class="card-header">
      <h5 class="mb-0">Customize Your Analytics Dashboard</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-4">
          <h6>Dashboard Theme</h6>
          <div class="d-flex flex-wrap gap-2 mb-3">
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeDefault" value="default" checked>
              <label class="form-check-label" for="themeDefault">Default</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeDark" value="dark">
              <label class="form-check-label" for="themeDark">Dark</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themePastel" value="pastel">
              <label class="form-check-label" for="themePastel">Pastel</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeVivid" value="vivid">
              <label class="form-check-label" for="themeVivid">Vivid</label>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="cardHeadersStyle" class="form-label">Card Headers Style</label>
            <select class="form-select" id="cardHeadersStyle">
              <option value="default" selected>Default</option>
              <option value="solid">Solid Colors</option>
              <option value="gradient">Gradient</option>
              <option value="subtle">Subtle</option>
              <option value="monochrome">Monochrome</option>
            </select>
          </div>
        </div>
        
        <div class="col-md-4">
          <h6>Chart Colors</h6>
          <div class="mb-3">
            <label for="categoryChartColors" class="form-label">Category Chart</label>
            <select class="form-select" id="categoryChartColors">
              <option value="default" selected>Default</option>
              <option value="tea">Tea Colors</option>
              <option value="pastels">Pastel Colors</option>
              <option value="monochrome">Monochrome</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="mapLineColor" class="form-label">Map Lines</label>
            <input type="color" class="form-control form-control-color" id="mapLineColor" value="#ff637c" title="Choose map line color">
          </div>
        </div>
        
        <div class="col-md-4">
          <h6>Text & Header Colors</h6>
          <div class="mb-3">
            <label for="chartTextColor" class="form-label">Chart Text Color</label>
            <input type="color" class="form-control form-control-color" id="chartTextColor" value="#333333" title="Choose chart text color">
          </div>
          <div class="mb-3">
            <label for="dashboardTitleColor" class="form-label">Dashboard Title Color</label>
            <input type="color" class="form-control form-control-color" id="dashboardTitleColor" value="#212529" title="Choose dashboard title color">
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-between mt-2">
        <button id="resetCustomizations" class="btn btn-secondary">Reset to Default</button>
        <button id="saveCustomizations" class="btn btn-success">Save Preferences</button>
      </div>
    </div>
  </div>
  
  <!-- Analytics Overview -->
  <div class="row mb-4">
    <div class="col-md-3">
      <div class="stats-card bg-success">
        <div class="stats-card-inner">
          <h1 class="stats-value"><%= @total_teas %></h1>
          <p class="stats-label">Total Teas</p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3">
      <div class="stats-card bg-primary">
        <div class="stats-card-inner">
          <h1 class="stats-value"><%= @tea_categories.count %></h1>
          <p class="stats-label">Categories</p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3">
      <div class="stats-card bg-warning">
        <div class="stats-card-inner">
          <h1 class="stats-value"><%= @avg_rank ? @avg_rank.round(1) : 'N/A' %></h1>
          <p class="stats-label">Avg. Rank</p>
        </div>
      </div>
    </div>
    
    <div class="col-md-3">
      <div class="stats-card bg-info">
        <div class="stats-card-inner">
          <h1 class="stats-value"><%= number_to_currency(@total_value) %></h1>
          <p class="stats-label">Collection Value</p>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Category Analysis -->
  <div class="row mb-4">
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Category Distribution</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="categoryChart" data-title="Tea Categories Distribution">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="category-chart" style="height: 300px;">
            <canvas id="categoryChart" style="width:100%;height:100%;"></canvas>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Average Rank by Category</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="rankByCategory" data-title="Average Rank by Tea Category">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <% @category_avg_ranks.each do |category, avg_rank| %>
            <div class="d-flex align-items-center mb-3">
              <div class="me-3 text-end" style="width: 100px;">
                <strong><%= category %></strong>
              </div>
              <div class="progress flex-grow-1" style="height: 25px;">
                <div class="progress-bar bg-success" role="progressbar" 
                     style="width: <%= (avg_rank.to_f / @total_teas) * 100 %>%;" 
                     aria-valuenow="<%= avg_rank %>" aria-valuemin="0" aria-valuemax="100">
                  <%= avg_rank.round(1) %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Origin Analysis -->
  <div class="row mb-4">
    <div class="col-md-12">
      <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Tea Origins Map</h5>
          <div>
            <button class="btn btn-sm btn-light share-chart-btn me-2" data-chart="worldMap" data-title="Tea Origins Map">
              <i class="bi bi-share"></i> Share
            </button>
            <button id="toggleMapDetails" class="btn btn-sm btn-light">Show Details</button>
          </div>
        </div>
        <div class="card-body">
          <div class="origins-map" style="height: 400px; position: relative;">
            <div id="worldMap" style="width:100%;height:100%;"></div>
            <div id="mapDetails" class="bg-white shadow-sm border rounded p-2" style="position: absolute; bottom: 10px; right: 10px; max-width: 300px; max-height: 200px; overflow-y: auto; display: none; z-index: 1000; font-size: 12px;">
              <h6 class="mb-2">Tea Origins</h6>
              <div id="originsList"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Price Analysis -->
  <div class="row mb-4">
    <div class="col-md-6">
      <div class="retro-card">
        <div class="card-header">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Price vs. Rank Analysis</h5>
            <button class="retro-share-btn" data-chart="priceRankChart" data-title="Price vs. Rank Analysis">
              <i class="bi bi-share"></i> <span>Share</span>
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="price-rank-chart" style="height: 300px;">
            <canvas id="priceRankChart" style="width:100%;height:100%;"></canvas>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="retro-card">
        <div class="card-header">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Price Distribution by Vendor</h5>
            <button class="retro-share-btn" data-chart="vendorPriceChart" data-title="Price Distribution by Vendor">
              <i class="bi bi-share"></i> <span>Share</span>
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="vendor-price-chart" style="height: 300px;">
            <canvas id="vendorPriceChart" style="width:100%;height:100%;"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Sharing Modal -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="shareModalLabel">Share</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center mb-3">
          <div id="sharePreview" class="border rounded mb-3 mx-auto" style="max-width: 100%; overflow: hidden;">
            <!-- Preview content will be injected here -->
          </div>
          <div id="shareSpinner" class="text-center my-5 d-none">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Generating image...</p>
          </div>
        </div>
        <div class="share-options">
          <div class="d-grid gap-2">
            <button id="downloadImage" class="btn btn-primary">
              <i class="bi bi-download"></i> Download as Image
            </button>
            <button id="copyToClipboard" class="btn btn-secondary">
              <i class="bi bi-clipboard"></i> Copy to Clipboard
            </button>
            <button id="generateShareLink" class="btn btn-info">
              <i class="bi bi-link-45deg"></i> Generate Shareable Link
            </button>
            <div class="btn-group mt-2" role="group">
              <button id="shareTwitter" class="btn btn-outline-dark">
                <i class="bi bi-twitter"></i>
              </button>
              <button id="shareFacebook" class="btn btn-outline-dark">
                <i class="bi bi-facebook"></i>
              </button>
              <button id="shareReddit" class="btn btn-outline-dark">
                <i class="bi bi-reddit"></i>
              </button>
              <button id="shareWhatsApp" class="btn btn-outline-dark">
                <i class="bi bi-whatsapp"></i>
              </button>
            </div>
          </div>
        </div>
        <div id="shareLinkContainer" class="mt-3 d-none">
          <div class="input-group">
            <input type="text" id="shareLink" class="form-control" readonly>
            <button class="btn btn-outline-secondary" type="button" id="copyLinkBtn">Copy</button>
          </div>
          <small class="text-muted">This link will expire in 30 days</small>
        </div>
        <div id="shareResult" class="alert mt-3 d-none"></div>
      </div>
    </div>
  </div>
</div>

<!-- Load required libraries in correct order -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get data from controller with error handling
  const categoryData = <%= raw @tea_type_counts.to_json %>;
  const originData = <%= raw @popular_ship_from.to_json %>;
  const originCoords = <%= raw @origin_coords.to_json %>;
  const teasData = <%= raw @teas.to_json(only: [:id, :name, :price, :grams, :vendor, :category, :ship_from]) %>;
  
  console.log('Origin data:', originData);
  console.log('Origin coordinates:', originCoords);
  
  // Create a mapping of tea ranks directly from entries
  const rankData = {};
  <% current_user.entries.each do |entry| %>
    rankData[<%= entry.tea_id %>] = <%= entry.rank %>;
  <% end %>
  
  console.log("Tea rank mapping:", rankData);
  
  // Set up global chart defaults for consistent text colors and fonts
  Chart.defaults.color = '#333333';
  Chart.defaults.font.family = getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace";
  Chart.defaults.plugins.legend.labels.color = '#333333';
  Chart.defaults.plugins.title.color = '#333333';
  
  // Category Distribution Chart
  function renderCategoryChart() {
    const ctx = document.getElementById('categoryChart').getContext('2d');
    if (!ctx) return;
    
    const categories = Object.keys(categoryData);
    const counts = Object.values(categoryData);
    
    const backgroundColor = [
      'rgba(54, 162, 235, 0.6)', // blue
      'rgba(255, 99, 132, 0.6)', // pink
      'rgba(75, 192, 192, 0.6)', // green
      'rgba(255, 206, 86, 0.6)', // yellow
      'rgba(153, 102, 255, 0.6)', // purple
      'rgba(255, 159, 64, 0.6)', // orange
      'rgba(199, 199, 199, 0.6)' // gray
    ];
    
    window.categoryChart = new Chart(ctx, {
      type: 'pie',
      data: {
        labels: categories,
        datasets: [{
          data: counts,
          backgroundColor: backgroundColor.slice(0, categories.length),
          borderColor: backgroundColor.map(color => color.replace('0.6', '1')),
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace",
                size: 12
              }
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.raw || 0;
                const total = counts.reduce((a, b) => a + b, 0);
                const percentage = Math.round((value / total) * 100);
                return `${label}: ${value} (${percentage}%)`;
              }
            }
          }
        }
      }
    });
    
    return window.categoryChart;
  }
  
  // World Map Implementation
  function renderWorldMap() {
    const mapElement = document.getElementById('worldMap');
    if (!mapElement) {
      console.error('Map element not found');
      return;
    }
    
    // Clear any existing map
    mapElement.innerHTML = '';
    
    try {
      // Initialize the map
      const map = L.map('worldMap', {
        center: [30, 100],
        zoom: 2,
        zoomControl: true,
        scrollWheelZoom: true
      });
      
      // Store map reference globally for sharing
      window.teaMap = map;
      
      // Add tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        maxZoom: 18
      }).addTo(map);
      
      // Home location (adjust as needed)
      const homeLocation = [40.7128, -74.0060]; // New York as example
      
      // Add home marker
      const homeIcon = L.divIcon({
        className: 'home-marker',
        html: '<i class="bi bi-house-fill" style="color: #007bff; font-size: 20px;"></i>',
        iconSize: [20, 20],
        iconAnchor: [10, 10]
      });
      
      L.marker(homeLocation, { icon: homeIcon })
        .addTo(map)
        .bindPopup('<strong>Your Location</strong>')
        .bindTooltip('Home', { permanent: false, direction: 'top' });
      
      // Process origins and add markers
      const origins = Object.keys(originData);
      const unmappedOrigins = [];
      
      // Populate details panel
      const originsList = document.getElementById('originsList');
      if (originsList) {
        originsList.innerHTML = origins.map(origin => 
          `<div class="mb-2 d-flex justify-content-between">
             <span><i class="bi bi-geo-alt-fill text-success me-1"></i>${origin}</span>
             <span class="badge bg-success">${originData[origin]}</span>
           </div>`
        ).join('');
      }
      
      // Add markers for each origin
      origins.forEach(origin => {
        if (!origin || origin.trim() === '') return;
        
        const count = originData[origin];
        let coords = null;
        
        // Try exact match first
        if (originCoords[origin]) {
          coords = originCoords[origin];
        } else {
          // Try case-insensitive match
          const originLower = origin.toLowerCase();
          for (const [key, value] of Object.entries(originCoords)) {
            if (key.toLowerCase() === originLower) {
              coords = value;
              break;
            }
          }
        }
        
        if (coords) {
          // Create tea marker
          const teaIcon = L.divIcon({
            className: 'tea-marker',
            html: `<i class="bi bi-cup-hot-fill" style="color: #28a745; font-size: 16px;"></i>`,
            iconSize: [16, 16],
            iconAnchor: [8, 8]
          });
          
          const marker = L.marker(coords, { icon: teaIcon })
            .addTo(map)
            .bindPopup(`
              <div class="text-center">
                <h6 class="mb-1">${origin}</h6>
                <span class="badge bg-success">${count} ${count === 1 ? 'tea' : 'teas'}</span>
              </div>
            `)
            .bindTooltip(`${origin}: ${count} teas`, {
              permanent: false,
              direction: 'top',
              className: 'custom-tooltip'
            });
          
          // Add line from origin to home
          const line = L.polyline([coords, homeLocation], {
            color: '#ff6b6b',
            weight: Math.max(1, Math.min(count / 2, 4)),
            opacity: 0.7,
            dashArray: '5, 10'
          }).addTo(map);
          
          // Add popup to line as well
          line.bindPopup(`
            <div class="text-center">
              <strong>${origin} → Home</strong><br>
              <small>${count} ${count === 1 ? 'tea' : 'teas'} shipped</small>
            </div>
          `);
          
        } else {
          unmappedOrigins.push(origin);
          console.warn(`No coordinates found for: ${origin}`);
        }
      });
      
      // Show warning for unmapped origins
      if (unmappedOrigins.length > 0) {
        const warningDiv = document.createElement('div');
        warningDiv.className = 'alert alert-warning alert-sm';
        warningDiv.style.position = 'absolute';
        warningDiv.style.top = '10px';
        warningDiv.style.left = '10px';
        warningDiv.style.zIndex = '1000';
        warningDiv.style.maxWidth = '250px';
        warningDiv.style.fontSize = '11px';
        warningDiv.innerHTML = `
          <strong>Unmapped origins:</strong><br>
          ${unmappedOrigins.join(', ')}
        `;
        mapElement.appendChild(warningDiv);
      }
      
      // Fit map to show all markers
      if (origins.length > 0) {
        const group = new L.featureGroup();
        map.eachLayer(layer => {
          if (layer instanceof L.Marker) {
            group.addLayer(layer);
          }
        });
        
        if (group.getLayers().length > 0) {
          map.fitBounds(group.getBounds().pad(0.1));
        }
      }
      
      // Force map resize after a short delay
      setTimeout(() => {
        map.invalidateSize();
      }, 100);
      
    } catch (error) {
      console.error('Error initializing map:', error);
      mapElement.innerHTML = `
        <div class="alert alert-danger text-center">
          <h6>Map Error</h6>
          <p>Unable to load the map. Please refresh the page.</p>
          <small>Error: ${error.message}</small>
        </div>
      `;
    }
  }
  
  // Price vs Rank Correlation Chart (Scatter Plot)
  function renderPriceRankChart() {
    const ctx = document.getElementById('priceRankChart').getContext('2d');
    if (!ctx) return;
    
    // Debug the teas data
    console.log('Tea data received:', teasData);
    console.log('Rank data mapping:', rankData);
    
    // Use the rankData mapping to get ranks for each tea
    const validTeas = teasData.filter(tea => {
      let price = 0, grams = 0;
      
      try {
        price = typeof tea.price === 'number' ? tea.price : parseFloat(tea.price || 0);
      } catch (e) {
        price = 0;
      }

      try {
        grams = typeof tea.grams === 'number' ? tea.grams : parseFloat(tea.grams || 1);
      } catch (e) {
        grams = 1;
      }
      
      const rank = rankData[tea.id] || 0;
      
      console.log(`Tea: ${tea.name || 'unknown'}, ID: ${tea.id}, Price: ${price}, Grams: ${grams}, Rank: ${rank}`);
      
      return price > 0 && rank > 0;
    });
    
    console.log(`Found ${validTeas.length} valid teas for price-rank chart`);
    
    if (validTeas.length === 0) {
      console.warn('No valid teas with price and rank data for the scatter plot');
      const chartContainer = document.querySelector('.price-rank-chart');
      if (chartContainer) {
        chartContainer.innerHTML = `
          <div class="alert alert-warning text-center my-5">
            <p>No teas with complete price and rank data could be processed.</p>
            <p>Please ensure your teas have both price and ranking information.</p>
          </div>
        `;
      }
      return;
    }
    
    // Prepare data for scatter plot
    const scatterData = validTeas.map(tea => {
      let price, grams;
      
      try {
        price = typeof tea.price === 'number' ? tea.price : parseFloat(tea.price || 0);
      } catch (e) {
        price = 0;
      }
      
      try {
        grams = typeof tea.grams === 'number' ? tea.grams : parseFloat(tea.grams || 1);
        if (grams <= 0) grams = 1;
      } catch (e) {
        grams = 1;
      }
      
      const rank = rankData[tea.id] || 0;
      const pricePerGram = grams > 0 ? price / grams : price;
      
      return {
        x: pricePerGram,
        y: rank,
        label: tea.name || 'Unnamed Tea',
        category: tea.category || 'Unknown',
        price: price,
        grams: grams
      };
    });
    
    // Get unique categories for color coding
    const uniqueCategories = [...new Set(validTeas.map(tea => tea.category || 'Unknown'))];
    const colorPalette = [
      'rgba(255, 99, 132, 0.6)',
      'rgba(54, 162, 235, 0.6)',
      'rgba(255, 206, 86, 0.6)',
      'rgba(75, 192, 192, 0.6)',
      'rgba(153, 102, 255, 0.6)',
      'rgba(255, 159, 64, 0.6)'
    ];
    
    // Create datasets, one for each category
    const datasets = uniqueCategories.map((category, index) => {
      const color = colorPalette[index % colorPalette.length];
      return {
        label: category,
        data: scatterData.filter(point => point.category === category),
        backgroundColor: color,
        borderColor: color.replace('0.6', '1'),
        pointRadius: 6,
        pointHoverRadius: 8
      };
    });
    
    window.priceRankChart = new Chart(ctx, {
      type: 'scatter',
      data: {
        datasets: datasets
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          tooltip: {
            callbacks: {
              label: function(context) {
                const point = context.raw;
                const labels = [
                  `Name: ${point.label}`,
                  `Price/Gram: $${point.x.toFixed(3)}/g`,
                  `Price: $${point.price.toFixed(2)}`,
                  `Rank: ${point.y}`,
                ];
                
                if (point.grams > 0) {
                  labels.splice(3, 0, `Grams: ${point.grams}g`);
                }
                
                if (point.category && point.category !== 'Unknown') {
                  labels.push(`Category: ${point.category}`);
                }
                
                return labels;
              }
            }
          },
          legend: {
            position: 'top',
          }
        },
        scales: {
          x: {
            type: 'linear',
            position: 'bottom',
            title: {
              display: true,
              text: 'Price per Gram ($/g)',
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace",
                weight: 'bold'
              }
            },
            ticks: {
              callback: value => `$${value.toFixed(2)}`,
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace"
              }
            }
          },
          y: {
            title: {
              display: true,
              text: 'Rank',
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace",
                weight: 'bold'
              }
            },
            ticks: {
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace"
              }
            }
          }
        }
      }
    });
    
    return window.priceRankChart;
  }
  
  // Vendor Price Distribution Chart
  function renderVendorPriceChart() {
    const ctx = document.getElementById('vendorPriceChart').getContext('2d');
    if (!ctx) return;
    
    console.log('Rendering vendor price chart...');
    
    const vendorGroups = {};
    teasData.forEach(tea => {
      let price = 0, grams = 0;
      const vendor = tea.vendor || tea.company || '';
      
      try {
        price = typeof tea.price === 'number' ? tea.price : parseFloat(tea.price || 0);
      } catch (e) {
        price = 0;
      }
      
      try {
        grams = typeof tea.grams === 'number' ? tea.grams : parseFloat(tea.grams || 1);
        if (grams <= 0) grams = 1;
      } catch (e) {
        grams = 1;
      }
      
      if (price > 0 && vendor) {
        if (!vendorGroups[vendor]) {
          vendorGroups[vendor] = [];
        }
        
        const pricePerGram = price / grams;
        vendorGroups[vendor].push({
          price: price,
          pricePerGram: pricePerGram,
          grams: grams,
          value: pricePerGram
        });
      }
    });
    
    const vendorCount = Object.keys(vendorGroups).length;
    console.log(`Found ${vendorCount} vendors with price data`);
    
    if (vendorCount === 0) {
      console.warn('No vendor price data available');
      const chartContainer = document.querySelector('.vendor-price-chart');
      if (chartContainer) {
        chartContainer.innerHTML = `
          <div class="alert alert-warning text-center my-5">
            <p>No teas with vendor and price data available.</p>
            <p>Please add vendor and price information to your teas.</p>
          </div>
        `;
      }
      return;
    }
    
    // Calculate average price per vendor
    const vendorAvgPrices = {};
    Object.keys(vendorGroups).forEach(vendor => {
      const prices = vendorGroups[vendor].map(item => item.value);
      vendorAvgPrices[vendor] = prices.reduce((sum, price) => sum + price, 0) / prices.length;
    });
    
    // Sort vendors by average price
    const sortedVendors = Object.keys(vendorAvgPrices).sort((a, b) => 
      vendorAvgPrices[b] - vendorAvgPrices[a]
    );
    
    const displayVendors = sortedVendors;
    const displayAvgPrices = displayVendors.map(vendor => vendorAvgPrices[vendor]);
    const teaCounts = displayVendors.map(vendor => vendorGroups[vendor].length);
    
    window.vendorPriceChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: displayVendors,
        datasets: [{
          label: 'Average Price per Gram',
          data: displayAvgPrices,
          backgroundColor: 'rgba(255, 99, 132, 0.6)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          tooltip: {
            callbacks: {
              label: function(context) {
                const vendor = context.label;
                const avgPrice = context.raw.toFixed(2);
                const count = teaCounts[context.dataIndex];
                return [
                  `Price/Gram: $${avgPrice}/g`,
                  `Tea Count: ${count}`
                ];
              }
            }
          }
        },
        scales: {
          x: {
            title: {
              display: true,
              text: 'Vendor',
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace",
                weight: 'bold'
              }
            },
            ticks: {
              maxRotation: 45,
              minRotation: 45,
              autoSkip: false,
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace"
              }
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Price per Gram ($/g)',
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace",
                weight: 'bold'
              }
            },
            ticks: {
              callback: value => `$${value.toFixed(2)}`,
              font: {
                family: getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace"
              }
            }
          }
        }
      }
    });
    
    return window.vendorPriceChart;
  }
  
  // Toggle map details
  document.getElementById('toggleMapDetails').addEventListener('click', function() {
    const detailsPanel = document.getElementById('mapDetails');
    if (detailsPanel.style.display === 'none') {
      detailsPanel.style.display = 'block';
      this.textContent = 'Hide Details';
    } else {
      detailsPanel.style.display = 'none';
      this.textContent = 'Show Details';
    }
  });
  
  // Dashboard Customization Feature
  const customizePanel = document.getElementById('customizePanel');
  const toggleCustomizePanel = document.getElementById('toggleCustomizePanel');
  
  // Color theme palettes
  const colorThemes = {
    default: [
      'rgba(54, 162, 235, 0.6)',
      'rgba(255, 99, 132, 0.6)',
      'rgba(75, 192, 192, 0.6)',
      'rgba(255, 206, 86, 0.6)',
      'rgba(153, 102, 255, 0.6)',
      'rgba(255, 159, 64, 0.6)'
    ],
    tea: [
      'rgba(183, 110, 39, 0.6)',
      'rgba(104, 160, 99, 0.6)',
      'rgba(196, 145, 2, 0.6)',
      'rgba(181, 71, 82, 0.6)',
      'rgba(76, 40, 30, 0.6)',
      'rgba(192, 171, 142, 0.6)'
    ],
    pastels: [
      'rgba(255, 179, 198, 0.6)',
      'rgba(181, 234, 215, 0.6)',
      'rgba(255, 241, 179, 0.6)',
      'rgba(199, 206, 234, 0.6)',
      'rgba(235, 179, 255, 0.6)',
      'rgba(181, 228, 255, 0.6)'
    ],
    monochrome: [
      'rgba(44, 62, 80, 0.8)',
      'rgba(44, 62, 80, 0.7)',
      'rgba(44, 62, 80, 0.6)', 
      'rgba(44, 62, 80, 0.5)',
      'rgba(44, 62, 80, 0.4)',
      'rgba(44, 62, 80, 0.3)'
    ]
  };
  
  // Save preferences to localStorage
  function savePreferences() {
    try {
      const prefs = {
        dashboardTheme: document.querySelector('input[name="dashboardTheme"]:checked').value,
        categoryChartColors: document.getElementById('categoryChartColors').value,
        mapLineColor: document.getElementById('mapLineColor').value,
        chartTextColor: document.getElementById('chartTextColor').value,
        cardHeadersStyle: document.getElementById('cardHeadersStyle').value,
        dashboardTitleColor: document.getElementById('dashboardTitleColor')?.value || '#212529'
      };
      
      localStorage.setItem('teaTrackerDashboardPrefs', JSON.stringify(prefs));
      
      const saveBtn = document.getElementById('saveCustomizations');
      const originalText = saveBtn.textContent;
      saveBtn.textContent = 'Saved!';
      saveBtn.classList.remove('btn-success');
      saveBtn.classList.add('btn-info');
      
      setTimeout(() => {
        saveBtn.textContent = originalText;
        saveBtn.classList.remove('btn-info');
        saveBtn.classList.add('btn-success');
      }, 2000);
      
    } catch (e) {
      console.error('Error saving preferences:', e);
    }
  }
  
  // Load saved preferences from localStorage
  function loadPreferences() {
    try {
      const savedPrefs = localStorage.getItem('teaTrackerDashboardPrefs');
      if (savedPrefs) {
        const prefs = JSON.parse(savedPrefs);
        
        document.querySelector(`input[name="dashboardTheme"][value="${prefs.dashboardTheme || 'default'}"]`).checked = true;
        
        if (prefs.categoryChartColors) {
          document.getElementById('categoryChartColors').value = prefs.categoryChartColors;
        }
        
        if (prefs.mapLineColor) {
          document.getElementById('mapLineColor').value = prefs.mapLineColor;
        }
        
        if (prefs.chartTextColor) {
          document.getElementById('chartTextColor').value = prefs.chartTextColor;
        }
        
        if (prefs.cardHeadersStyle) {
          document.getElementById('cardHeadersStyle').value = prefs.cardHeadersStyle;
        }
        
        if (prefs.dashboardTitleColor && document.getElementById('dashboardTitleColor')) {
          document.getElementById('dashboardTitleColor').value = prefs.dashboardTitleColor;
        }
        
        applyPreferences();
      }
    } catch (e) {
      console.error('Error loading preferences:', e);
    }
  }
  
  // Apply preferences to dashboard
  function applyPreferences() {
    const theme = document.querySelector('input[name="dashboardTheme"]:checked').value;
    const categoryColors = document.getElementById('categoryChartColors').value;
    const mapColor = document.getElementById('mapLineColor').value;
    const textColor = document.getElementById('chartTextColor').value;
    const headerStyle = document.getElementById('cardHeadersStyle').value;
    const titleColor = document.getElementById('dashboardTitleColor')?.value || '#212529';
    
    applyTheme(theme);
    updateCardHeadersAndStats(headerStyle);
    
    const dashboardTitle = document.querySelector('.container-fluid h1');
    if (dashboardTitle) {
      dashboardTitle.style.color = titleColor;
    }
    
    updateChartColors(categoryColors, textColor);
    updateMapColors(mapColor);
  }
  
  // Apply overall theme
  function applyTheme(theme) {
    const root = document.documentElement;
    const cards = document.querySelectorAll('.card');
    const textColor = document.getElementById('chartTextColor').value;
    
    document.body.classList.remove('theme-dark', 'theme-pastel', 'theme-vivid');
    
    if (theme === 'dark') {
      document.body.classList.add('theme-dark');
      root.style.setProperty('--chart-text-color', '#e0e0e0');
      document.body.style.backgroundColor = '#2c3e50';
      document.body.style.color = '#e0e0e0';
      
      cards.forEach(card => {
        card.style.backgroundColor = '#34495e';
        card.style.borderColor = '#2c3e50';
      });
      
    } else if (theme === 'pastel') {
      document.body.classList.add('theme-pastel');
      root.style.setProperty('--chart-text-color', '#5a6268');
      document.body.style.backgroundColor = '#f8f9fa';
      
      cards.forEach(card => {
        card.style.backgroundColor = '#ffffff';
        card.style.borderColor = '#e9ecef';
      });
      
    } else if (theme === 'vivid') {
      document.body.classList.add('theme-vivid');
      root.style.setProperty('--chart-text-color', '#212529');
      document.body.style.backgroundColor = '#ffffff';
      
    } else {
      root.style.setProperty('--chart-text-color', '#333333');
      document.body.style.backgroundColor = '';
      document.body.style.color = '';
      
      cards.forEach(card => {
        card.style.backgroundColor = '';
        card.style.borderColor = '';
      });
    }
    
    Chart.defaults.color = textColor;
    Chart.defaults.plugins.legend.labels.color = textColor;
    Chart.defaults.plugins.title.color = textColor;
  }
  
  // Update card headers and statistic cards
  function updateCardHeadersAndStats(style) {
    const headers = document.querySelectorAll('.card-header');
    const selectedColors = colorThemes[document.getElementById('categoryChartColors').value] || colorThemes.default;
    
    headers.forEach(header => {
      header.style.background = '';
      header.style.borderBottom = '';
      header.style.color = '';
    });
    
    if (style === 'solid') {
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '1');
        header.style.backgroundColor = color;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
    } else if (style === 'gradient') {
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const startColor = selectedColors[colorIdx].replace('0.6', '0.9');
        const endColor = selectedColors[(i+1) % selectedColors.length].replace('0.6', '0.7');
        header.style.background = `linear-gradient(135deg, ${startColor}, ${endColor})`;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
    } else if (style === 'subtle') {
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '0.3');
        const borderColor = selectedColors[colorIdx].replace('0.6', '0.8');
        header.style.backgroundColor = color;
        header.style.borderBottom = `2px solid ${borderColor}`;
        header.style.color = '#333333';
      });
    } else if (style === 'monochrome') {
      headers.forEach((header, i) => {
        const shade = 0.2 + (i % 5) * 0.1;
        header.style.backgroundColor = `rgba(33, 37, 41, ${shade})`;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
    }
  }
  
  // Update chart colors based on selection
  function updateChartColors(colorScheme, textColor = '#333333') {
    const selectedColors = colorThemes[colorScheme] || colorThemes.default;
    const pixelFont = getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace";
    
    Chart.defaults.color = textColor;
    Chart.defaults.font.family = pixelFont;
    Chart.defaults.plugins.legend.labels.color = textColor;
    Chart.defaults.plugins.title.color = textColor;
    
    // Update category chart if it exists
    if (window.categoryChart && typeof window.categoryChart.data !== 'undefined') {
      const chart = window.categoryChart;
      chart.data.datasets[0].backgroundColor = selectedColors.slice(0, chart.data.labels.length);
      chart.data.datasets[0].borderColor = selectedColors.map(color => color.replace('0.6', '1')).slice(0, chart.data.labels.length);
      
      if (chart.options && chart.options.plugins && chart.options.plugins.legend) {
        chart.options.plugins.legend.labels.color = textColor;
        chart.options.plugins.legend.labels.font = {
          family: pixelFont,
          size: chart.options.plugins.legend.labels.font?.size || 12
        };
      }
      
      chart.update();
    }
    
    // Update other charts similarly...
    if (window.vendorPriceChart && typeof window.vendorPriceChart.data !== 'undefined') {
      const chart = window.vendorPriceChart;
      chart.data.datasets[0].backgroundColor = selectedColors.map(c => c);
      chart.data.datasets[0].borderColor = selectedColors.map(c => c.replace('0.6', '1'));
      chart.update();
    }
    
    if (window.priceRankChart && typeof window.priceRankChart.data !== 'undefined') {
      const chart = window.priceRankChart;
      if (chart.data && chart.data.datasets) {
        chart.data.datasets.forEach((dataset, i) => {
          const color = selectedColors[i % selectedColors.length];
          dataset.backgroundColor = color;
          dataset.borderColor = color.replace('0.6', '1');
        });
      }
      chart.update();
    }
  }
  
  // Update map colors
  function updateMapColors(color) {
    const mapLines = document.querySelectorAll('.leaflet-overlay-pane path');
    mapLines.forEach(line => {
      line.style.stroke = color;
      
      if (line.classList.contains('leaflet-polylineDecorator') || 
          !line.hasAttribute('stroke-dasharray')) {
        line.style.fill = color;
        line.style.fillOpacity = '0.8';
      }
    });
  }
  
  // Event Listeners
  toggleCustomizePanel.addEventListener('click', () => {
    if (customizePanel.style.display === 'none') {
      customizePanel.style.display = 'block';
      toggleCustomizePanel.innerHTML = '<i class="bi bi-x-lg"></i> <span>Close</span>';
      toggleCustomizePanel.classList.add('active');
    } else {
      customizePanel.style.display = 'none';
      toggleCustomizePanel.innerHTML = '<i class="bi bi-palette"></i> <span>Customize</span>';
      toggleCustomizePanel.classList.remove('active');
    }
  });
  
  document.getElementById('saveCustomizations').addEventListener('click', () => {
    applyPreferences();
    savePreferences();
    
    customizePanel.style.display = 'none';
    toggleCustomizePanel.innerHTML = '<i class="bi bi-palette"></i> <span>Customize</span>';
    toggleCustomizePanel.classList.remove('active');
  });
  
  document.getElementById('resetCustomizations').addEventListener('click', () => {
    document.getElementById('themeDefault').checked = true;
    document.getElementById('categoryChartColors').value = 'default';
    document.getElementById('mapLineColor').value = '#ff637c';
    document.getElementById('chartTextColor').value = '#333333';
    document.getElementById('cardHeadersStyle').value = 'default';
    if (document.getElementById('dashboardTitleColor')) {
      document.getElementById('dashboardTitleColor').value = '#212529';
    }
    
    applyPreferences();
    savePreferences();
  });
  
  // Apply changes in real-time for instant preview
  document.querySelectorAll('input[name="dashboardTheme"]').forEach(radio => {
    radio.addEventListener('change', applyPreferences);
  });
  
  document.getElementById('categoryChartColors').addEventListener('change', applyPreferences);
  document.getElementById('mapLineColor').addEventListener('change', applyPreferences);
  document.getElementById('chartTextColor').addEventListener('change', applyPreferences);
  document.getElementById('cardHeadersStyle').addEventListener('change', applyPreferences);
  if (document.getElementById('dashboardTitleColor')) {
    document.getElementById('dashboardTitleColor').addEventListener('change', applyPreferences);
  }
  
  // Sharing Implementation
  let currentShareElement = null;
  let currentShareTitle = '';
  let capturedImage = null;
  
  // Share button handlers
  document.querySelectorAll('.share-chart-btn, .retro-share-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const chartId = this.dataset.chart;
      currentShareTitle = this.dataset.title || 'Tea Analytics';
      
      // Determine what to share
      if (chartId === 'worldMap') {
        currentShareElement = document.getElementById('worldMap');
      } else if (chartId === 'categoryChart') {
        currentShareElement = document.getElementById('categoryChart');
      } else if (chartId === 'priceRankChart') {
        currentShareElement = document.getElementById('priceRankChart');
      } else if (chartId === 'vendorPriceChart') {
        currentShareElement = document.getElementById('vendorPriceChart');
      } else if (chartId === 'rankByCategory') {
        currentShareElement = document.querySelector('.card-header').closest('.card');
      } else {
        currentShareElement = document.querySelector(`.${chartId}`) || document.getElementById(chartId);
      }
      
      console.log(`Sharing ${chartId}:`, currentShareElement);
      
      if (currentShareElement) {
        openShareModal();
      } else {
        alert('Unable to find content to share. Please try again.');
      }
    });
  });
  
  // Dashboard share button
  document.getElementById('shareDashboardBtn').addEventListener('click', function() {
    currentShareElement = document.querySelector('.container-fluid');
    currentShareTitle = 'Tea Analytics Dashboard';
    openShareModal();
  });
  
  // Open share modal and capture content
  function openShareModal() {
    // Check if Bootstrap 5 is available
    if (typeof bootstrap !== 'undefined') {
      const modalElement = document.getElementById('shareModal');
      const modal = new bootstrap.Modal(modalElement);
      modal.show();
    } else {
      // Fallback for Bootstrap 4 or jQuery
      $('#shareModal').modal('show');
    }
    
    // Slight delay to ensure the modal is rendered before capturing
    setTimeout(() => {
      captureContent();
    }, 300);
  }
  
  // Capture content as image using html2canvas
  function captureContent() {
    if (!currentShareElement) {
      console.error("No element selected for sharing");
      showShareResult('error', 'No content found to share. Please try again.');
      return;
    }
    
    console.log("Capturing element:", currentShareElement);
    
    const preview = document.getElementById('sharePreview');
    const spinner = document.getElementById('shareSpinner');
    
    // Clear previous content and show spinner
    preview.innerHTML = '';
    preview.style.display = 'none';
    spinner.classList.remove('d-none');
    
    try {
      // If it's a Chart.js canvas, we can just use that directly
      if (currentShareElement instanceof HTMLCanvasElement && 
          (currentShareElement.id === 'categoryChart' || 
           currentShareElement.id === 'priceRankChart' || 
           currentShareElement.id === 'vendorPriceChart')) {
        
        // Create a copy of the canvas with a white background
        const canvas = document.createElement('canvas');
        canvas.width = currentShareElement.width;
        canvas.height = currentShareElement.height;
        const ctx = canvas.getContext('2d');
        
        // Fill white background
        ctx.fillStyle = '#FFFFFF';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Copy the original canvas content
        ctx.drawImage(currentShareElement, 0, 0);
        
        // Add title text
        ctx.font = 'bold 16px Arial';
        ctx.fillStyle = '#333333';
        ctx.textAlign = 'center';
        ctx.fillText(currentShareTitle, canvas.width / 2, 30);
        
        // Add watermark
        ctx.font = '12px Arial';
        ctx.fillStyle = '#888888';
        ctx.textAlign = 'right';
        ctx.fillText('Generated with Tea Tracker', canvas.width - 10, canvas.height - 10);
        
        handleCapturedCanvas(canvas);
        return;
      }
      
      // For everything else, use html2canvas
      fallbackToHtml2Canvas();
    } catch (err) {
      console.error("Error in captureContent:", err);
      showShareResult('error', 'An unexpected error occurred. Please try again.');
      spinner.classList.add('d-none');
    }
    
    function fallbackToHtml2Canvas() {
      // Ensure element is visible
      const originalDisplay = currentShareElement.style.display;
      if (getComputedStyle(currentShareElement).display === 'none') {
        currentShareElement.style.display = 'block';
      }
      
      // Additional style options for better image quality
      const options = {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false,
        onclone: function(clonedDoc) {
          try {
            // Add watermark to cloned element
            const watermark = clonedDoc.createElement('div');
            watermark.style.position = 'absolute';
            watermark.style.bottom = '10px';
            watermark.style.right = '10px';
            watermark.style.padding = '5px';
            watermark.style.borderRadius = '3px';
            watermark.style.backgroundColor = 'rgba(255,255,255,0.7)';
            watermark.style.fontSize = '12px';
            watermark.innerText = 'Generated with Tea Tracker';
            
            // Add title
            const title = clonedDoc.createElement('div');
            title.style.position = 'absolute';
            title.style.top = '10px';
            title.style.left = '10px';
            title.style.padding = '5px 10px';
            title.style.borderRadius = '3px';
            title.style.backgroundColor = 'rgba(255,255,255,0.9)';
            title.style.fontSize = '16px';
            title.style.fontWeight = 'bold';
            title.innerText = currentShareTitle;
            
            let clonedElement;
            
            if (currentShareElement.id) {
              clonedElement = clonedDoc.getElementById(currentShareElement.id);
            }
            
            if (!clonedElement && currentShareElement.className) {
              const classes = currentShareElement.className.split(' ');
              if (classes.length > 0) {
                clonedElement = clonedDoc.querySelector('.' + classes[0]);
              }
            }
            
            if (!clonedElement) {
              const uniqueId = 'share-target-' + Date.now();
              currentShareElement.setAttribute('data-share-id', uniqueId);
              clonedElement = clonedDoc.querySelector(`[data-share-id="${uniqueId}"]`);
            }
            
            if (clonedElement) {
              clonedElement.style.position = 'relative';
              clonedElement.style.overflow = 'visible';
              clonedElement.appendChild(watermark);
              clonedElement.appendChild(title);
            } else {
              console.error("Could not find cloned element");
            }
          } catch (err) {
            console.error("Error in onclone function:", err);
          }
        }
      };
      
      // Capture the element as an image
      html2canvas(currentShareElement, options)
        .then(canvas => {
          // Restore original display if needed
          if (originalDisplay !== currentShareElement.style.display) {
            currentShareElement.style.display = originalDisplay;
          }
          
          handleCapturedCanvas(canvas);
        })
        .catch(err => {
          console.error("Error capturing content:", err);
          showShareResult('error', 'Failed to generate image. Please try again.');
          spinner.classList.add('d-none');
          
          // Restore original display if needed
          if (originalDisplay !== currentShareElement.style.display) {
            currentShareElement.style.display = originalDisplay;
          }
        });
    }
  }
  
  function handleCapturedCanvas(canvas) {
    const preview = document.getElementById('sharePreview');
    const spinner = document.getElementById('shareSpinner');
    
    capturedImage = canvas;
    
    // Set max dimensions while maintaining aspect ratio
    const maxWidth = preview.offsetWidth;
    const scale = maxWidth / canvas.width;
    const scaledHeight = canvas.height * scale;
    
    // Resize canvas for preview
    canvas.style.width = '100%';
    canvas.style.height = 'auto';
    canvas.style.borderRadius = '4px';
    
    // Hide spinner and show preview
    spinner.classList.add('d-none');
    preview.style.display = 'block';
    preview.appendChild(canvas);
    
    // Enable share buttons now that we have an image
    enableShareButtons();
  }
  
  // Enable share buttons once image is generated
  function enableShareButtons() {
    document.getElementById('downloadImage').disabled = false;
    document.getElementById('copyToClipboard').disabled = false;
    document.getElementById('generateShareLink').disabled = false;
    document.getElementById('shareTwitter').disabled = false;
    document.getElementById('shareFacebook').disabled = false;
    document.getElementById('shareReddit').disabled = false;
    document.getElementById('shareWhatsApp').disabled = false;
  }
  
  // Download Image button click handler
  document.getElementById('downloadImage').addEventListener('click', function() {
    if (!capturedImage) return;
    
    capturedImage.toBlob(function(blob) {
      saveAs(blob, `${currentShareTitle.replace(/\s+/g, '_')}.png`);
      showShareResult('success', 'Image downloaded successfully!');
    });
  });
  
  // Copy to Clipboard button click handler
  document.getElementById('copyToClipboard').addEventListener('click', async function() {
    if (!capturedImage) return;
    
    try {
      const blob = await new Promise(resolve => capturedImage.toBlob(resolve));
      await navigator.clipboard.write([
        new ClipboardItem({
          [blob.type]: blob
        })
      ]);
      showShareResult('success', 'Image copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy image: ', err);
      showShareResult('error', 'Failed to copy image. Your browser may not support this feature.');
    }
  });
  
  // Generate Share Link button click handler
  document.getElementById('generateShareLink').addEventListener('click', async function() {
    if (!capturedImage) return;
    
    try {
      const linkContainer = document.getElementById('shareLinkContainer');
      const linkInput = document.getElementById('shareLink');
      
      showShareResult('info', 'Generating shareable link...');
      
      setTimeout(() => {
        const demoShareLink = `${window.location.origin}/share/${Math.random().toString(36).substring(2, 10)}`;
        
        linkInput.value = demoShareLink;
        linkContainer.classList.remove('d-none');
        
        showShareResult('success', 'Shareable link generated!');
      }, 1000);
    } catch (err) {
      console.error('Failed to generate link: ', err);
      showShareResult('error', 'Failed to generate shareable link.');
    }
  });
  
  // Copy Share Link button handler
  document.getElementById('copyLinkBtn').addEventListener('click', function() {
    const linkInput = document.getElementById('shareLink');
    linkInput.select();
    document.execCommand('copy');
    
    this.innerText = 'Copied!';
    setTimeout(() => {
      this.innerText = 'Copy';
    }, 2000);
  });
  
  // Social media share handlers
  document.getElementById('shareTwitter').addEventListener('click', function() {
    shareToSocialMedia('twitter');
  });
  
  document.getElementById('shareFacebook').addEventListener('click', function() {
    shareToSocialMedia('facebook');
  });
  
  document.getElementById('shareReddit').addEventListener('click', function() {
    shareToSocialMedia('reddit');
  });
  
  document.getElementById('shareWhatsApp').addEventListener('click', function() {
    shareToSocialMedia('whatsapp');
  });
  
  // Share to social media platforms
  function shareToSocialMedia(platform) {
    if (navigator.share && capturedImage) {
      capturedImage.toBlob(async function(blob) {
        const file = new File([blob], `${currentShareTitle.replace(/\s+/g, '_')}.png`, { type: 'image/png' });
        
        try {
          await navigator.share({
            title: currentShareTitle,
            text: 'Check out my Tea Tracker stats!',
            files: [file]
          });
          showShareResult('success', 'Content shared successfully!');
        } catch (err) {
          console.error('Error sharing:', err);
          
          let shareUrl = '';
          const demoShareLink = `${window.location.origin}/share/${Math.random().toString(36).substring(2, 10)}`;
          
          switch (platform) {
            case 'twitter':
              shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(currentShareTitle)}&url=${encodeURIComponent(demoShareLink)}`;
              break;
            case 'facebook':
              shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(demoShareLink)}`;
              break;
            case 'reddit':
              shareUrl = `https://www.reddit.com/submit?url=${encodeURIComponent(demoShareLink)}&title=${encodeURIComponent(currentShareTitle)}`;
              break;
            case 'whatsapp':
              shareUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(currentShareTitle + ' ' + demoShareLink)}`;
              break;
          }
          
          if (shareUrl) {
            window.open(shareUrl, '_blank');
          }
        }
      });
    } else {
      showShareResult('info', 'Direct sharing not supported in your browser. Please use the "Generate Shareable Link" option instead.');
    }
  }
  
  // Display result messages
  function showShareResult(type, message) {
    const resultElement = document.getElementById('shareResult');
    
    resultElement.className = 'alert mt-3';
    resultElement.classList.add(`alert-${type === 'error' ? 'danger' : type}`);
    resultElement.textContent = message;
    resultElement.classList.remove('d-none');
    
    setTimeout(() => {
      resultElement.classList.add('d-none');
    }, 5000);
  }
  
  // Call all chart rendering functions
  if (document.getElementById('categoryChart')) renderCategoryChart();
  if (document.getElementById('priceRankChart')) renderPriceRankChart();
  if (document.getElementById('vendorPriceChart')) renderVendorPriceChart();
  renderWorldMap();
  
  // Load preferences on page load
  loadPreferences();
});
</script>
