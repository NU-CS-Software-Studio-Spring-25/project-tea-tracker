<h1 class="mt-5 text-center gradient-text">Welcome Back to Tea Tracker, <%= current_user.username %>!</h1>
<% if current_user %>
<div class="container-fluid py-4">
  <!-- Theme Styles -->
  <style>
    :root {
      --chart-text-color: #333333;
    }
    
    /* Theme Styles */
    body.theme-dark {
      background-color: #2c3e50;
      color: #e0e0e0;
    }
    
    body.theme-dark .card {
      background-color: #34495e;
      border-color: #2c3e50;
    }
    
    body.theme-dark .card-header {
      border-color: #2c3e50;
    }
    
    body.theme-dark .text-muted {
      color: #a0aec0 !important;
    }
    
    body.theme-pastel {
      background-color: #f8f9fa;
      color: #5a6268;
    }
    
    body.theme-pastel .card {
      background-color: #ffffff;
      border-color: #e9ecef;
    }
    
    body.theme-pastel .card-header.bg-primary {
      background-color: #a8d8ff !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-success {
      background-color: #c3e6cb !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-info {
      background-color: #bee5eb !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-warning {
      background-color: #ffeeba !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-danger {
      background-color: #f5c6cb !important;
      color: #212529 !important;
    }
    
    /* Transition effects */
    body, .card, .card-header {
      transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }
    
    /* Keep the custom font loading but we'll use it for our pixel fonts */
    @import url('https://fonts.googleapis.com/css2?family=VT323&family=Silkscreen:wght@400;700&family=Pixelify+Sans&display=swap');
  </style>

  <!-- Y2K-Style User Profile Section -->
  <div class="row mb-5">
    <div class="col-md-12">
      <div class="profile-card">
        <div class="profile-inner">
          <div class="profile-content">
            <div class="row align-items-center">
              <div class="col-lg-2 col-md-3 col-sm-4 text-center">
                <div class="avatar-container">
                  <% if current_user.avatar.attached? %>
                    <%= image_tag current_user.avatar, class: "avatar-img", alt: "#{current_user.username}" %>
                  <% elsif current_user.avatar_url.present? %>
                    <img src="<%= current_user.avatar_url %>" class="avatar-img" alt="<%= current_user.username %>">
                  <% else %>
                    <div class="avatar-placeholder">
                      <i class="bi bi-person-circle"></i>
                    </div>
                  <% end %>
                </div>
              </div>
              
              <div class="col-lg-7 col-md-6 col-sm-8">
                <div class="profile-info">
                  <h2 class="profile-name"><%= current_user.username %></h2>
                  <p class="profile-bio"><%= current_user.bio.present? ? current_user.bio : "No bio yet. Add one to tell people about your tea journey!" %></p>
                  
                  <div class="profile-stats">
                    <div class="stat-item">
                      <div class="stat-value"><%= @total_teas %></div>
                      <div class="stat-label">Teas</div>
                    </div>
                    <div class="stat-item">
                      <div class="stat-value"><%= @tea_type_counts.keys.count %></div>
                      <div class="stat-label">Categories</div>
                    </div>
                    <div class="stat-item">
                      <div class="stat-value"><%= @popular_ship_from.keys.count %></div>
                      <div class="stat-label">Origins</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="col-lg-3 col-md-3 col-sm-12">
                <div class="dashboard-controls">
                  <button id="toggleCustomizePanel" class="control-btn customize-btn">
                    <i class="bi bi-palette"></i>
                    <span>Customize</span>
                  </button>
                  <button id="shareDashboardBtn" class="control-btn share-btn">
                    <i class="bi bi-share"></i>
                    <span>Share</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Customization Panel -->
  <div id="customizePanel" class="card shadow-sm mb-4" style="display: none;">
    <div class="card-header bg-light">
      <h5 class="mb-0">Customize Your Dashboard</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-4">
          <h6>Dashboard Theme</h6>
          <div class="d-flex flex-wrap gap-2 mb-3">
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeDefault" value="default" checked>
              <label class="form-check-label" for="themeDefault">Default</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeDark" value="dark">
              <label class="form-check-label" for="themeDark">Dark</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themePastel" value="pastel">
              <label class="form-check-label" for="themePastel">Pastel</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeVivid" value="vivid">
              <label class="form-check-label" for="themeVivid">Vivid</label>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="cardHeadersColor" class="form-label">Card Headers Style</label>
            <select class="form-select" id="cardHeadersStyle">
              <option value="default" selected>Default</option>
              <option value="solid">Solid Colors</option>
              <option value="gradient">Gradient</option>
              <option value="subtle">Subtle</option>
              <option value="monochrome">Monochrome</option>
            </select>
          </div>
        </div>
        
        <div class="col-md-4">
          <h6>Chart Colors</h6>
          <div class="mb-3">
            <label for="categoryChartColors" class="form-label">Chart Colors</label>
            <select class="form-select" id="categoryChartColors">
              <option value="default" selected>Default</option>
              <option value="tea">Tea Colors</option>
              <option value="pastels">Pastel Colors</option>
              <option value="monochrome">Monochrome</option>
            </select>
          </div>
        </div>
        
        <div class="col-md-4">
          <h6>Text & Header Colors</h6>
          <div class="mb-3">
            <label for="chartTextColor" class="form-label">Chart Text Color</label>
            <input type="color" class="form-control form-control-color" id="chartTextColor" value="#333333" title="Choose chart text color">
          </div>
          <div class="mb-3">
            <label for="dashboardTitleColor" class="form-label">Dashboard Title Color</label>
            <input type="color" class="form-control form-control-color" id="dashboardTitleColor" value="#212529" title="Choose dashboard title color">
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-between mt-2">
        <button id="resetCustomizations" class="btn btn-secondary">Reset to Default</button>
        <button id="saveCustomizations" class="btn btn-success">Save Preferences</button>
      </div>
    </div>
  </div>

  <!-- Tea Collection Summary -->
  <div class="row mb-4">
    <div class="col-md-12">
      <div class="d-flex justify-content-between align-items-center">
        <h3 class="border-bottom pb-2 mb-3">Your Tea Collection at a Glance</h3>
        <button class="btn btn-sm btn-outline-primary share-chart-btn" data-chart="teaSummarySection" data-title="My Tea Collection Summary">
          <i class="bi bi-share"></i> Share Stats
        </button>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-success text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= @total_teas %></h1>
          <p class="mb-0">Unique Teas</p>
        </div>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-primary text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= @tea_type_counts.keys.count %></h1>
          <p class="mb-0">Tea Categories</p>
        </div>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-warning text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= number_to_currency(@average_tea_cost) %></h1>
          <p class="mb-0">Avg. Cost</p>
        </div>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-info text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= @popular_ship_from.keys.count %></h1>
          <p class="mb-0">Origins</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Tea Categories and Origins -->
  <div class="row mb-4">
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header bg-success text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Tea Categories</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="categoriesSection" data-title="My Tea Categories">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <% @tea_type_counts.each do |category, count| %>
            <div class="d-flex align-items-center mb-3">
              <div class="me-3 text-end" style="width: 100px;">
                <strong><%= category %></strong>
              </div>
              <div class="progress flex-grow-1" style="height: 25px;">
                <div class="progress-bar bg-success" role="progressbar"
                     style="width: <%= (count.to_f / @tea_type_counts.values.sum) * 100 %>%;"
                     aria-valuenow="<%= count %>" aria-valuemin="0" aria-valuemax="<%= @tea_type_counts.values.sum %>">
                  <%= count %> (<%= ((count.to_f / @tea_type_counts.values.sum) * 100).round(1) %>%)
                </div>
              </div>
            </div>
          <% end %>
          <div class="text-end mt-3">
            <%= link_to "View by Category", categories_path, class: "btn btn-sm btn-outline-success", title: "Category view not implemented yet" %>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header bg-primary text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Tea Origins</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="originsSection" data-title="My Tea Origins">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="list-group">
            <% @popular_ship_from.each do |location, count| %>
              <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                  <i class="bi bi-geo-alt me-2"></i>
                  <%= location %>
                </div>
                <span class="badge bg-primary rounded-pill"><%= count %> teas</span>
              </div>
            <% end %>
          </div>
          <div class="text-end mt-3">
            <%= link_to "View by Origin", origins_path, class: "btn btn-sm btn-outline-primary", title: "Origin view not implemented yet" %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Tea Vendors and Age -->
  <div class="row mb-4">
    <!-- Top Vendors -------------------------------------------->
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header bg-success text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Top Vendors</h5>
            <button class="btn btn-sm btn-light share-chart-btn"
                    data-chart="vendorsSection" data-title="My Tea Vendors">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>

        <div class="card-body scroll-box"><!-- <— limit & scroll here -->
          <div class="list-group">
            <% @vendor_tea_counts.each do |vendor, count| %>
              <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                  <i class="bi bi-shop me-2"></i>
                  <%= vendor %>
                </div>
                <span class="badge bg-success rounded-pill"><%= count %> teas</span>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>

    <!-- Tea by Age --------------------------------------------->
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header bg-primary text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Tea by Age</h5>
            <button class="btn btn-sm btn-light share-chart-btn"
                    data-chart="ageSection" data-title="My Tea by Age">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>

        <div class="card-body scroll-box"><!-- <— limit & scroll here -->
          <% @tea_by_age.each do |age, count| %>
            <div class="d-flex align-items-center mb-3">
              <div class="me-3 text-end" style="width: 100px;">
                <strong><%= age == "Unknown" ? "Unknown" : "#{age} years" %></strong>
              </div>
              <div class="progress flex-grow-1" style="height: 25px;">
                <div class="progress-bar bg-primary"
                    role="progressbar"
                    style="width: <%= (count.to_f / @tea_by_age.values.sum) * 100 %>%;"
                    aria-valuenow="<%= count %>"
                    aria-valuemin="0"
                    aria-valuemax="<%= @tea_by_age.values.sum %>">
                  <%= count %> (<%= ((count.to_f / @tea_by_age.values.sum) * 100).round(1) %>%)
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>


  <!-- Tea Highlights -->
  <div class="row mb-4 tea-highlights-row">
    <div class="col-md-12">
      <h3 class="border-bottom pb-2 mb-3">Tea Highlights</h3>
    </div>

    <!-- Top Ranked Tea -->
    <div class="col-md-4">
      <div class="card shadow-sm h-100 tea-highlight-card">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">Top Ranked Tea</h5>
        </div>
        <div class="card-body d-flex flex-column align-items-center justify-content-between">
          <% if @top_ranked_tea %>
            <div class="text-center mb-3">
              <h4 class="mb-1"><%= @top_ranked_tea.year %> <%= @top_ranked_tea.name %></h4>
              <p class="text-muted mb-3"><%= @top_ranked_tea.category %></p>
            </div>

            <div class="tea-rating my-3">
              <div class="progress mb-2" style="height: 8px; width: 150px;">
                <div class="progress-bar bg-success" role="progressbar"
                     style="width: <%= (@top_entry.rank.to_f) %>%;" 
                     aria-valuenow="<%= @top_entry.rank %>" aria-valuemin="0" aria-valuemax="100">
                </div>
              </div>
              <p class="text-center">Rank: <%= @top_entry.rank %>/<%= @total_teas%></p>
            </div>

            <div class="mt-auto">
              <%= link_to "View Details", tea_path(@top_ranked_tea), class: "btn btn-sm btn-outline-secondary" %>
            </div>
          <% else %>
            <p class="text-muted">No ranked teas yet.</p>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Premium Selection -->
    <div class="col-md-4">
      <div class="card shadow-sm h-100 tea-highlight-card">
        <div class="card-header bg-danger text-white">
          <h5 class="mb-0">Premium Selection</h5>
        </div>
        <div class="card-body d-flex flex-column align-items-center justify-content-between">
          <% if @most_expensive_tea %>
            <div class="text-center mb-3">
              <h4 class="mb-1"><%= @most_expensive_tea.year %> <%= @most_expensive_tea.name %></h4>
              <p class="text-muted mb-3"><%= @most_expensive_tea.category %></p>
            </div>

            <div class="my-3 text-center">
              <h3 class="text-danger mb-2"><%= number_to_currency(@most_expensive_tea.price) %>/g</h3>
              <p class="">From <%= @most_expensive_tea.vendor %></p>
            </div>

            <div class="mt-auto">
              <%= link_to "View Details", tea_path(@most_expensive_tea), class: "btn btn-sm btn-outline-danger" %>
            </div>
          <% else %>
            <p class="text-muted">No teas with a price yet.</p>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Recent Addition -->
    <div class="col-md-4">
      <div class="card shadow-sm h-100 tea-highlight-card">
        <div class="card-header bg-dark text-white">
          <h5 class="mb-0">Recent Addition</h5>
        </div>
        <div class="card-body d-flex flex-column align-items-center justify-content-between">
          <% if @recent_teas.first %>
            <% recent_tea = @recent_teas.first %>
            <div class="text-center mb-3">
              <h4 class="mb-1"><%= recent_tea.year %> <%= recent_tea.name %></h4>
              <p class="text-muted mb-3"><%= recent_tea.category %></p>
            </div>

            <div class="my-3 text-center">
              <h3 class="text-dark mb-2"><%= number_to_currency(recent_tea.price) %>/g</h3>
              <p class="">From <%= recent_tea.vendor %></p>
              <p class="text-muted">Added <%= time_ago_in_words(recent_tea.created_at) %> ago</p>
            </div>

            <div class="mt-auto">
              <%= link_to "View Details", tea_path(recent_tea), class: "btn btn-sm btn-outline-dark" %>
            </div>
          <% else %>
            <p class="text-muted">No recent teas added.</p>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Price Range Distribution -->
  <div class="row mb-4">
    <div class="col-md-12">
      <div class="card shadow-sm">
        <div class="card-header bg-warning text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Price Range Distribution</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="priceRangeSection" data-title="My Tea Price Ranges">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="row">
            <% @price_ranges.each do |range, count| %>
              <div class="col-md-3 mb-3">
                <div class="card text-center h-100">
                  <div class="card-body">
                    <h5 class="card-title"><%= range %></h5>
                    <h2 class="display-4 mb-0"><%= count %></h2>
                    <p class="text-muted">teas</p>
                    <div class="progress mt-2">
                      <div class="progress-bar bg-warning" role="progressbar"
                           style="width: <%= (count.to_f / @price_ranges.values.sum) * 100 %>%;"
                           aria-valuenow="<%= count %>" aria-valuemin="0" aria-valuemax="<%= @price_ranges.values.sum %>">
                        <%= ((count.to_f / @price_ranges.values.sum) * 100).round(1) %>%
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Price Distribution Chart -->
  <div class="card shadow-sm mb-4">
    <div class="card-header bg-info text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Your Price Distribution</h5>
        <button class="btn btn-sm btn-light share-chart-btn" data-chart="priceChart" data-title="My Tea Price Distribution">
          <i class="bi bi-share"></i> Share
        </button>
      </div>
    </div>

    <div class="card-body p-3">
      <div class="row">
        <div class="col-md-8">
          <div class="border rounded p-3" style="height:400px;">
            <canvas id="priceChart" style="width:100%;height:100%;"></canvas>
          </div>
        </div>
        <div class="col-md-4">
          <!-- Price Statistics -->
          <div id="price-statistics">
            <%= render partial: 'price_statistics' %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Recent Additions -->
  <div class="row mb-4">
    <div class="col-md-12">
      <div class="card shadow-sm">
        <div class="card-header bg-info text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Recent Additions</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="recentSection" data-title="My Recent Tea Additions">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Category</th>
                  <th>Vendor</th>
                  <th>Price</th>
                  <th>Added</th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                <% @recent_teas.each do |tea| %>
                  <tr>
                    <td><%= tea.year %> <%= tea.name %></td>
                    <td><%= tea.category %></td>
                    <td><%= tea.vendor %></td>
                    <td><%= number_to_currency(tea.price) %>/g</td>
                    <td><%= time_ago_in_words(tea.created_at) %> ago</td>
                    <td>
                      <%= link_to "View", tea_path(tea), class: "btn btn-sm btn-outline-info" %>
                    </td>
                  </tr>
                <% end %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="text-center mt-4 mb-5">
    <%= link_to "View All Teas", teas_path, class: "btn btn-primary btn-lg px-4" %>
  </div>
</div>

<% else %>
  <p class="text-center">
    <%= link_to "Login", new_session_path %> or
    <%= link_to "Sign Up", new_user_path %> to get started tracking your teas.
  </p>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const teaData = <%= @user_teas.to_json.html_safe %>; // [["Name", price, grams]]
  if (!teaData.length) return;

  function getPriceValue(price, grams) {
    return parseFloat(price); // Just use the raw price, no need to divide by grams
  }

  function getHistogramData() {
    const values = teaData.map(([_, price, grams]) => getPriceValue(price, grams)).filter(v => v !== null);

    const binSize = 0.1;
    const min = 0;
    const max = Math.max(...values);
    const roundedMax = Math.ceil(max); // for axis

    const bins = [];
    const binCounts = [];

    for (let b = min; b < roundedMax; b += binSize) {
      bins.push(b + binSize / 2); // bin center
      binCounts.push(0);
    }

    teaData.forEach(([_, price, grams]) => {
      const val = getPriceValue(price, grams);
      if (val === null) return;
      const i = Math.floor((val - min) / binSize);
      if (i >= 0 && i < binCounts.length) {
        binCounts[i]++;
      }
    });

    const histogramData = bins.map((x, i) => ({
      x,
      y: binCounts[i]
    }));

    return { histogramData, bins, binSize, values, roundedMax };
  }

  function getSmoothedLine(values, minX, maxX, resolution = 200) {
    const kernel = x => {
      const bw = 0.05;
      return values.reduce((sum, v) => {
        const z = (x - v) / bw;
        return sum + Math.exp(-0.5 * z * z);
      }, 0) / (values.length * bw * Math.sqrt(2 * Math.PI));
    };

    const xPoints = [], yPoints = [];
    for (let i = 0; i < resolution; i++) {
      const x = minX + ((maxX - minX) * i) / (resolution - 1);
      xPoints.push(x);
      yPoints.push(kernel(x));
    }

    const yMax = Math.max(...yPoints);
    const scaledY = yPoints.map(y => y * (10 / yMax)); // scale to match bar height

    return xPoints.map((x, i) => ({ x, y: scaledY[i] }));
  }

  const ctx = document.getElementById('priceChart').getContext('2d');
  let chart;

  // Get theme color
  function getThemeBarColor() {
    // Get from theme or use default pink if not set
    if (window.colorThemes && document.getElementById('categoryChartColors')) {
      const colorScheme = document.getElementById('categoryChartColors').value;
      const selectedColors = window.colorThemes[colorScheme] || window.colorThemes.default;
      return selectedColors[0]; // Use first color in selected theme
    }
    
    // Default color
    return 'rgba(255, 179, 198, 0.6)';  // pink
  }

  // Make renderChart available globally
  window.renderChart = function() {
    const { histogramData, bins, binSize, values, roundedMax } = getHistogramData();
    const maxY = Math.ceil(Math.max(...histogramData.map(d => d.y)) / 5) * 5;
    
    // Get theme color
    const barColor = getThemeBarColor();

    const datasets = [{
      type: 'bar',
      data: histogramData,
      backgroundColor: barColor,
      borderColor: barColor.replace('0.6', '1'),
      borderWidth: 1,
      barPercentage: 1.0,
      categoryPercentage: 1.0
    }];

    const smooth = getSmoothedLine(values, 0, roundedMax);
    datasets.push({
      type: 'line',
      data: smooth,
      borderColor: barColor.replace('0.6', '1'),
      borderWidth: 2,
      fill: false,
      tension: 0.4,
      pointRadius: 0,
      order: 1
    });

    if (chart) chart.destroy();

    // Define a custom font to ensure pixel font is used in charts
    const pixelFont = getComputedStyle(document.body).getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', monospace";
    Chart.defaults.font.family = pixelFont;

    window.priceChart = new Chart(ctx, {
      type: 'bar',
      data: { datasets },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: false }
        },
        scales: {
          x: {
            type: 'linear',
            min: 0,
            max: roundedMax,
            offset: false,
            title: {
              display: true,
              text: 'Price per Gram ($/g)',
              font: {
                family: pixelFont
              }
            },
            ticks: {
              stepSize: 0.10,
              callback: val => `$${val.toFixed(2)}`,
              font: {
                family: pixelFont
              }
            },
            grid: {
              drawTicks: true,
              drawOnChartArea: true,
              tickLength: 8,
              borderDash: []
            }
          },
          y: {
            beginAtZero: true,
            suggestedMax: maxY,
            title: {
              display: true,
              text: 'Number of Teas',
              font: {
                family: pixelFont
              }
            },
            ticks: {
              stepSize: 5,
              callback: val => val,
              font: {
                family: pixelFont
              }
            }
          }
        }
      }
    });
    
    return window.priceChart;
  };

  // Initial render on page load
  window.renderChart();
  
  // Dashboard Customization Feature
  // Color theme palettes
  window.colorThemes = {
    default: [
      'rgba(54, 162, 235, 0.6)', // blue
      'rgba(255, 99, 132, 0.6)', // pink
      'rgba(75, 192, 192, 0.6)', // green
      'rgba(255, 206, 86, 0.6)', // yellow
      'rgba(153, 102, 255, 0.6)', // purple
      'rgba(255, 159, 64, 0.6)'  // orange
    ],
    tea: [
      'rgba(183, 110, 39, 0.6)',  // brown
      'rgba(104, 160, 99, 0.6)',  // green
      'rgba(196, 145, 2, 0.6)',   // yellow
      'rgba(181, 71, 82, 0.6)',   // red
      'rgba(76, 40, 30, 0.6)',    // dark brown
      'rgba(192, 171, 142, 0.6)'  // beige
    ],
    pastels: [
      'rgba(255, 179, 198, 0.6)', // pink
      'rgba(181, 234, 215, 0.6)', // mint
      'rgba(255, 241, 179, 0.6)', // light yellow
      'rgba(199, 206, 234, 0.6)', // lavender
      'rgba(235, 179, 255, 0.6)', // light purple
      'rgba(181, 228, 255, 0.6)'  // sky blue
    ],
    monochrome: [
      'rgba(44, 62, 80, 0.8)',
      'rgba(44, 62, 80, 0.7)',
      'rgba(44, 62, 80, 0.6)', 
      'rgba(44, 62, 80, 0.5)',
      'rgba(44, 62, 80, 0.4)',
      'rgba(44, 62, 80, 0.3)'
    ]
  };
  
  const customizePanel = document.getElementById('customizePanel');
  const toggleCustomizePanel = document.getElementById('toggleCustomizePanel');
  
  // Apply preferences to dashboard
  function applyPreferences() {
    // Get current preferences
    const theme = document.querySelector('input[name="dashboardTheme"]:checked').value;
    const categoryColors = document.getElementById('categoryChartColors').value;
    const textColor = document.getElementById('chartTextColor').value;
    const headerStyle = document.getElementById('cardHeadersStyle').value;
    const titleColor = document.getElementById('dashboardTitleColor')?.value || '#212529';
    
    // Apply theme
    applyTheme(theme);
    
    // Apply card header styles
    updateCardHeadersAndStats(headerStyle);
    
    // Update dashboard title color
    const dashboardTitle = document.querySelector('h1.mt-5.text-center');
    if (dashboardTitle) {
      dashboardTitle.style.color = titleColor;
    }
    
    // Re-render charts with new colors
    updateChartColors(categoryColors, textColor);
  }
  
  // Update card headers and statistic cards
  function updateCardHeadersAndStats(style) {
    const headers = document.querySelectorAll('.card-header');
    const statCards = document.querySelectorAll('.row .card.bg-success, .row .card.bg-primary, .row .card.bg-warning, .row .card.bg-info');
    const progressBars = document.querySelectorAll('.progress-bar');
    const selectedColors = window.colorThemes[document.getElementById('categoryChartColors').value] || window.colorThemes.default;
    
    // Reset headers to default first
    headers.forEach(header => {
      header.style.background = '';
      header.style.borderBottom = '';
      header.style.color = '';
    });
    
    // Reset stat cards first
    statCards.forEach(card => {
      if (!card.classList.contains('bg-success') && 
          !card.classList.contains('bg-primary') && 
          !card.classList.contains('bg-warning') && 
          !card.classList.contains('bg-info')) return;
          
      card.style.background = '';
      card.style.backgroundColor = '';
      card.style.color = '';
    });
    
    // Apply header styles
    if (style === 'solid') {
      // Solid vibrant colors
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '1');
        header.style.backgroundColor = color;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const colorIdx = i % selectedColors.length;
        card.style.backgroundColor = selectedColors[colorIdx].replace('0.6', '0.9');
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const colorIdx = i % selectedColors.length;
        bar.style.backgroundColor = selectedColors[colorIdx].replace('0.6', '0.8');
      });
    } 
    else if (style === 'gradient') {
      // Gradient backgrounds
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const startColor = selectedColors[colorIdx].replace('0.6', '0.9');
        const endColor = selectedColors[(i+1) % selectedColors.length].replace('0.6', '0.7');
        header.style.background = `linear-gradient(135deg, ${startColor}, ${endColor})`;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const colorIdx = i % selectedColors.length;
        const startColor = selectedColors[colorIdx].replace('0.6', '0.9');
        const endColor = selectedColors[(i+1) % selectedColors.length].replace('0.6', '0.7');
        card.style.background = `linear-gradient(135deg, ${startColor}, ${endColor})`;
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const colorIdx = i % selectedColors.length;
        const startColor = selectedColors[colorIdx].replace('0.6', '0.8');
        const endColor = selectedColors[(i+1) % selectedColors.length].replace('0.6', '0.6');
        bar.style.background = `linear-gradient(90deg, ${startColor}, ${endColor})`;
      });
    }
    else if (style === 'subtle') {
      // Subtle backgrounds with border
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '0.3');
        const borderColor = selectedColors[colorIdx].replace('0.6', '0.8');
        header.style.backgroundColor = color;
        header.style.borderBottom = `2px solid ${borderColor}`;
        header.style.color = '#333333';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '0.7');
        card.style.backgroundColor = color;
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const colorIdx = i % selectedColors.length;
        bar.style.backgroundColor = selectedColors[colorIdx].replace('0.6', '0.8');
      });
    }
    else if (style === 'monochrome') {
      // Monochrome with different shade levels
      headers.forEach((header, i) => {
        const shade = 0.2 + (i % 5) * 0.1; // 0.2, 0.3, 0.4, 0.5, 0.6
        header.style.backgroundColor = `rgba(33, 37, 41, ${shade})`;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const shade = 0.5 + (i % 4) * 0.1; // 0.5, 0.6, 0.7, 0.8
        card.style.backgroundColor = `rgba(33, 37, 41, ${shade})`;
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const shade = 0.5 + (i % 5) * 0.1; // 0.5, 0.6, 0.7, 0.8, 0.9
        bar.style.backgroundColor = `rgba(33, 37, 41, ${shade})`;
      });
    }
  }
  
  // Apply overall theme
  function applyTheme(theme) {
    const root = document.documentElement;
    const cardHeaders = document.querySelectorAll('.card-header');
    const cards = document.querySelectorAll('.card');
    const textColor = document.getElementById('chartTextColor').value;
    
    // Reset previous theme classes
    document.body.classList.remove('theme-dark', 'theme-pastel', 'theme-vivid');
    
    if (theme === 'dark') {
      document.body.classList.add('theme-dark');
      root.style.setProperty('--chart-text-color', '#e0e0e0');
      document.body.style.backgroundColor = '#2c3e50';
      document.body.style.color = '#e0e0e0';
      
      cards.forEach(card => {
        card.style.backgroundColor = '#34495e';
        card.style.borderColor = '#2c3e50';
      });
      
    } else if (theme === 'pastel') {
      document.body.classList.add('theme-pastel');
      root.style.setProperty('--chart-text-color', '#5a6268');
      document.body.style.backgroundColor = '#f8f9fa';
      
      cards.forEach(card => {
        card.style.backgroundColor = '#ffffff';
        card.style.borderColor = '#e9ecef';
      });
      
    } else if (theme === 'vivid') {
      document.body.classList.add('theme-vivid');
      root.style.setProperty('--chart-text-color', '#212529');
      document.body.style.backgroundColor = '#ffffff';
      
      cardHeaders.forEach(header => {
        // Make card headers more vibrant
        if (header.classList.contains('bg-primary')) header.style.backgroundColor = '#007bff';
        if (header.classList.contains('bg-success')) header.style.backgroundColor = '#28a745'; 
        if (header.classList.contains('bg-info')) header.style.backgroundColor = '#17a2b8';
        if (header.classList.contains('bg-warning')) header.style.backgroundColor = '#ffc107';
        if (header.classList.contains('bg-danger')) header.style.backgroundColor = '#dc3545';
      });
      
    } else {
      // Default theme
      root.style.setProperty('--chart-text-color', '#333333');
      document.body.style.backgroundColor = '';
      document.body.style.color = '';
      
      cards.forEach(card => {
        card.style.backgroundColor = '';
        card.style.borderColor = '';
      });
      
      cardHeaders.forEach(header => {
        header.style.backgroundColor = '';
      });
    }
    
    // Always ensure the pixel font is preserved
    const pixelFont = root.style.getPropertyValue('--font-pixel') || "'Jersey 20', 'VT323', 'Silkscreen', 'Pixelify Sans', 'DotGothic16', 'Press Start 2P', monospace";
    
    // Apply pixel font to Chart.js defaults
    Chart.defaults.font.family = pixelFont;
    
    // Apply text color consistently to chart options
    Chart.defaults.color = textColor;
    Chart.defaults.plugins.legend.labels.color = textColor;
    Chart.defaults.plugins.title.color = textColor;
  }
  
  // Update chart colors based on selection
  function updateChartColors(colorScheme, textColor = '#333333') {
    const selectedColors = window.colorThemes[colorScheme] || window.colorThemes.default;
    
    // Set global chart text color
    Chart.defaults.color = textColor;
    Chart.defaults.plugins.legend.labels.color = textColor;
    Chart.defaults.plugins.title.color = textColor;
    
    // Update price chart (histogram) if it exists
    if (window.priceChart && typeof window.priceChart.data !== 'undefined') {
      const chart = window.priceChart;
      
      // Get theme color
      const barColor = selectedColors[0];
      
      // Update the colors of the bar chart
      if (chart.data && chart.data.datasets && chart.data.datasets.length > 0) {
        // First dataset is the bar chart
        chart.data.datasets[0].backgroundColor = barColor;
        chart.data.datasets[0].borderColor = barColor.replace('0.6', '1');
        
        // Second dataset is the line chart
        if (chart.data.datasets.length > 1) {
          chart.data.datasets[1].borderColor = barColor.replace('0.6', '1');
        }
      }
      
      // Update text colors
      if (chart.options && chart.options.scales) {
        if (chart.options.scales.x) {
          chart.options.scales.x.ticks.color = textColor;
          if (chart.options.scales.x.title) chart.options.scales.x.title.color = textColor;
        }
        if (chart.options.scales.y) {
          chart.options.scales.y.ticks.color = textColor;
          if (chart.options.scales.y.title) chart.options.scales.y.title.color = textColor;
        }
      }
      
      chart.update();
    } else {
      // If chart doesn't exist yet, just re-render it
      if (window.renderChart && typeof window.renderChart === 'function') {
        window.renderChart();
      }
    }
  }
  
  // Save preferences to localStorage
  function savePreferences() {
    try {
      const prefs = {
        dashboardTheme: document.querySelector('input[name="dashboardTheme"]:checked').value,
        categoryChartColors: document.getElementById('categoryChartColors').value,
        chartTextColor: document.getElementById('chartTextColor').value,
        cardHeadersStyle: document.getElementById('cardHeadersStyle').value,
        dashboardTitleColor: document.getElementById('dashboardTitleColor')?.value || '#212529'
      };
      
      localStorage.setItem('teaTrackerDashboardPrefs', JSON.stringify(prefs));
      
      // Show save confirmation
      const saveBtn = document.getElementById('saveCustomizations');
      const originalText = saveBtn.textContent;
      saveBtn.textContent = 'Saved!';
      saveBtn.classList.remove('btn-success');
      saveBtn.classList.add('btn-info');
      
      setTimeout(() => {
        saveBtn.textContent = originalText;
        saveBtn.classList.remove('btn-info');
        saveBtn.classList.add('btn-success');
      }, 2000);
      
    } catch (e) {
      console.error('Error saving preferences:', e);
    }
  }
  
  // Load saved preferences from localStorage
  function loadPreferences() {
    try {
      const savedPrefs = localStorage.getItem('teaTrackerDashboardPrefs');
      if (savedPrefs) {
        const prefs = JSON.parse(savedPrefs);
        
        // Apply theme
        document.querySelector(`input[name="dashboardTheme"][value="${prefs.dashboardTheme || 'default'}"]`).checked = true;
        
        // Apply chart colors
        if (prefs.categoryChartColors) {
          document.getElementById('categoryChartColors').value = prefs.categoryChartColors;
        }
        
        // Apply text color
        if (prefs.chartTextColor) {
          document.getElementById('chartTextColor').value = prefs.chartTextColor;
        }
        
        // Apply card header style
        if (prefs.cardHeadersStyle) {
          document.getElementById('cardHeadersStyle').value = prefs.cardHeadersStyle;
        }
        
        // Apply dashboard title color
        if (prefs.dashboardTitleColor && document.getElementById('dashboardTitleColor')) {
          document.getElementById('dashboardTitleColor').value = prefs.dashboardTitleColor;
        }
        
        // Apply all preferences
        applyPreferences();
      }
    } catch (e) {
      console.error('Error loading preferences:', e);
    }
  }
  
  // Event Listeners
  toggleCustomizePanel.addEventListener('click', () => {
    if (customizePanel.style.display === 'none') {
      customizePanel.style.display = 'block';
      toggleCustomizePanel.innerHTML = '<i class="bi bi-x-lg"></i> <span>Close</span>';
      toggleCustomizePanel.classList.add('active');
    } else {
      customizePanel.style.display = 'none';
      toggleCustomizePanel.innerHTML = '<i class="bi bi-palette"></i> <span>Customize</span>';
      toggleCustomizePanel.classList.remove('active');
    }
  });
  
  document.getElementById('saveCustomizations').addEventListener('click', () => {
    applyPreferences();
    savePreferences();
    
    // Close the customization panel automatically
    customizePanel.style.display = 'none';
    toggleCustomizePanel.innerHTML = '<i class="bi bi-palette"></i> <span>Customize</span>';
    toggleCustomizePanel.classList.remove('active');
  });
  
  document.getElementById('resetCustomizations').addEventListener('click', () => {
    // Reset form to defaults
    document.getElementById('themeDefault').checked = true;
    document.getElementById('categoryChartColors').value = 'default';
    document.getElementById('chartTextColor').value = '#333333';
    document.getElementById('cardHeadersStyle').value = 'default';
    if (document.getElementById('dashboardTitleColor')) {
      document.getElementById('dashboardTitleColor').value = '#212529';
    }
    
    // Apply defaults
    applyPreferences();
    savePreferences();
  });
  
  // Apply changes in real-time for instant preview
  document.querySelectorAll('input[name="dashboardTheme"]').forEach(radio => {
    radio.addEventListener('change', applyPreferences);
  });
  
  document.getElementById('categoryChartColors').addEventListener('change', applyPreferences);
  document.getElementById('chartTextColor').addEventListener('change', applyPreferences);
  document.getElementById('cardHeadersStyle').addEventListener('change', applyPreferences);
  if (document.getElementById('dashboardTitleColor')) {
    document.getElementById('dashboardTitleColor').addEventListener('change', applyPreferences);
  }
  
  // Load preferences on page load
  loadPreferences();
});
</script>

<!-- Sharing Modal -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="shareModalLabel">Share</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body text-center">
        <div id="shareLoading">
          <div class="spinner-border text-primary mb-3" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          <p>Generating image...</p>
          </div>
        <div id="shareContent" style="display:none;">
          <div id="sharePreview" class="mb-3" style="max-width:100%; overflow:hidden;"></div>
          <div class="d-grid gap-2">
            <button id="downloadAsImage" class="btn btn-primary">
              <i class="bi bi-download"></i> Download as Image
            </button>
            <button id="copyToClipboard" class="btn btn-secondary">
              <i class="bi bi-clipboard"></i> Copy to Clipboard
            </button>
            <div class="btn-group mt-2 w-100">
              <button id="shareFacebook" class="btn btn-outline-primary">
                <i class="bi bi-facebook"></i>
            </button>
              <button id="shareTwitter" class="btn btn-outline-info">
                <i class="bi bi-twitter"></i>
              </button>
              <button id="shareWhatsApp" class="btn btn-outline-success">
                <i class="bi bi-whatsapp"></i>
              </button>
              <button id="shareEmail" class="btn btn-outline-secondary">
                <i class="bi bi-envelope"></i>
              </button>
            </div>
          </div>
        </div>
        <div id="shareError" class="alert alert-danger mt-3" style="display:none;"></div>
          </div>
    </div>
  </div>
</div>

<!-- Load required libraries -->
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize sharing functionality
    initSharingFunctionality();
    
    // Global click handler as a fallback for share buttons
    document.addEventListener('click', function(e) {
      // Look for any share button that might have been missed
      if (e.target) {
        // Check if the click is on or within a share button
        const button = e.target.closest('.share-chart-btn, .btn:has(.bi-share), button:has(.bi-share)');
        if (button) {
          // Check if this looks like a share button but wasn't caught by our other handlers
          const icon = button.querySelector('.bi-share');
          if (icon && !button._hasShareHandler) {
            console.log('Global handler caught share button click');
            e.preventDefault();
            e.stopPropagation();
            
            // Find closest container
            const card = button.closest('.card');
            if (card) {
              // Try to determine the type from context
              let type = 'unknown';
              let title = 'Tea Chart';
              
              const header = card.querySelector('.card-header');
              if (header) {
                const headerText = header.textContent.toLowerCase();
                if (headerText.includes('price')) {
                  type = 'priceChart';
                  title = 'Price Distribution';
                } else if (headerText.includes('categories') || headerText.includes('category')) {
                  type = 'categoriesSection';
                  title = 'Tea Categories';
                } else if (headerText.includes('origins') || headerText.includes('origin')) {
                  type = 'originsSection';
                  title = 'Tea Origins';
                }
              }
              
              // Capture the card
              console.log('Global handler capturing:', type, title);
              captureAndShareElement(type, title, null, card);
              
              // Mark this button as handled to avoid double processing
              button._hasShareHandler = true;
            }
          }
        }
      }
    });
  });
  
  function initSharingFunctionality() {
    console.log('Initializing sharing functionality...');
    
    // First attempt: find share buttons by class
    const shareButtons = document.querySelectorAll('.share-chart-btn');
    console.log('Found share buttons by class:', shareButtons.length);
    
    // Second attempt: find buttons with data-chart attribute
    const attrButtons = document.querySelectorAll('[data-chart]');
    console.log('Found buttons by data-chart attribute:', attrButtons.length);
    
    // Third attempt: find specific buttons in headers
    const cardButtons = document.querySelectorAll('.card-header button:has(i.bi-share), .card-header .btn:has(i.bi-share)');
    console.log('Found buttons in card headers:', cardButtons.length);
    
    // Process all potential share buttons
    const allPotentialButtons = [...shareButtons, ...attrButtons, ...cardButtons];
    const processedButtons = new Set(); // Track buttons we've already processed
    
    allPotentialButtons.forEach(button => {
      // Skip if we've already processed this button
      if (processedButtons.has(button)) return;
      processedButtons.add(button);
      
      // Get chart type from data-attribute or infer from context
      let chartType = button.dataset.chart;
      
      // If no data-chart attribute, try to infer from the button's context
      if (!chartType) {
        const cardHeader = button.closest('.card-header');
        if (cardHeader) {
          const headerText = cardHeader.textContent.trim().toLowerCase();
          if (headerText.includes('price')) {
            chartType = 'priceChart';
          } else if (headerText.includes('categories') || headerText.includes('category')) {
            chartType = 'categoriesSection';
          } else if (headerText.includes('origins') || headerText.includes('origin')) {
            chartType = 'originsSection';
    } else {
            chartType = 'unknown';
          }
          console.log('Inferred chart type:', chartType, 'from header:', headerText);
        } else {
          chartType = 'unknown';
        }
      }
      
      // Get title or use default
      let title = button.dataset.title || 'Tea Chart';
      
      // If the title is missing, try to infer from context
      if (!title || title === 'Tea Chart') {
        const cardHeader = button.closest('.card-header');
        if (cardHeader) {
          title = cardHeader.textContent.trim().replace('Share', '').trim();
        }
      }
      
      console.log('Setting up button:', chartType, title, button);
      
      // Apply direct event listener
      button.onclick = function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('Button clicked:', chartType, title);
        
        // Find the parent card or content section
        const parentElement = this.closest('.card') || this.closest('section') || this.closest('.row');
        if (parentElement) {
          console.log('Capturing parent element:', parentElement);
          captureAndShareElement(chartType, title, this, parentElement);
        } else {
          console.log('No parent element found, using button context');
          captureAndShareElement(chartType, title, this);
        }
        
        return false;
      };
    });
    
    // Direct binding approach - find specific card sections
    // This is a fallback to ensure buttons work even if the above methods fail
    setupDirectCardBindings();
    
    // Dashboard share button
    const dashboardShareBtn = document.getElementById('shareDashboardBtn');
    if (dashboardShareBtn) {
      dashboardShareBtn.addEventListener('click', function(e) {
        e.preventDefault();
        console.log('Dashboard share button clicked');
        captureAndShareElement('dashboard', 'My Tea Tracker Dashboard');
      });
    } else {
      console.warn('Dashboard share button not found');
    }
    
    // Set up modal action buttons
    setupModalActionButtons();
  }
  
  // Set up direct bindings for specific card sections
  function setupDirectCardBindings() {
    console.log('Setting up direct card bindings...');
    
    // Define the sections to look for
    const sections = [
      { 
        selector: '.card-header:contains("Tea Categories"), .card-header:contains("Category")',
        type: 'categoriesSection',
        title: 'Tea Categories'
      },
      { 
        selector: '.card-header:contains("Tea Origins"), .card-header:contains("Origin")',
        type: 'originsSection',
        title: 'Tea Origins'
      },
      { 
        selector: '.card-header:contains("Price Distribution"), .card-header:contains("Your Price")',
        type: 'priceChart',
        title: 'Price Distribution'
      },
      { 
        selector: 'h3:contains("Tea Collection at a Glance")',
        type: 'teaSummarySection',
        title: 'Collection Summary'
      }
    ];
    
    // For each section type, find the elements and attach handlers
    sections.forEach(section => {
      try {
        // Find all matching headers
        const headers = document.querySelectorAll(section.selector);
        console.log(`Found ${headers.length} headers for ${section.type}`);
        
        headers.forEach(header => {
          // Find the parent card or section
          const card = header.closest('.card') || header.closest('section') || header.closest('.row');
          if (!card) return;
          
          // Find any existing share buttons in this card
          const buttons = card.querySelectorAll('button:has(.bi-share), .btn:has(.bi-share)');
          
          if (buttons.length > 0) {
            // Attach to existing buttons
            buttons.forEach(button => {
              console.log(`Attaching direct handler to existing button in ${section.type}`);
              button.onclick = function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log(`Direct button click for ${section.type}`);
                captureAndShareElement(section.type, section.title, null, card);
                return false;
              };
            });
          } else {
            // Add a share button if none exists
            console.log(`No share button found for ${section.type}, would add one here if needed`);
            // This could add a new share button if needed
          }
        });
      } catch (error) {
        console.error(`Error setting up direct binding for ${section.type}:`, error);
      }
    });
  }
  
  // Handle capture and sharing of elements
  function captureAndShareElement(elementType, title, buttonContext = null, directElement = null) {
    console.log(`Capturing ${elementType} with title: ${title}`);
    
    // If we were passed a direct element, use that
    if (directElement) {
      console.log('Using direct element for capture');
      showShareModal(directElement, title);
      return;
    }
    
    // Find the element to capture
    let targetElement = null;
    
    if (elementType === 'dashboard') {
      // Capture the main content
      targetElement = document.querySelector('.container-fluid');
    } else if (elementType === 'priceChart') {
      // Capture the price distribution chart
      targetElement = document.querySelector('.card:has(.card-header:contains("Your Price Distribution"))') ||
                       document.querySelector('.card:has(.card-header:contains("Price Distribution"))') ||
                       document.querySelector('.card:has(#priceChart)');
    } else if (elementType === 'categoriesSection') {
      // Capture the categories section
      targetElement = document.querySelector('.card:has(.card-header:contains("Tea Categories"))');
    } else if (elementType === 'originsSection') {
      // Capture the origins section
      targetElement = document.querySelector('.card:has(.card-header:contains("Tea Origins"))');
    } else if (elementType === 'teaSummarySection') {
      // Capture the tea summary section
      targetElement = document.querySelector('.row:has(h3:contains("Your Tea Collection at a Glance"))');
    } else if (elementType === 'card' && buttonContext) {
      // Direct card capture from button context
      targetElement = buttonContext.closest('.card');
    } else if (buttonContext) {
      // If we have a button context, use that to find the target
      targetElement = buttonContext.closest('.card') || 
                       buttonContext.closest('section') || 
                       buttonContext.closest('.row');
                       
      // If still not found, try looking up the DOM tree
      if (!targetElement && buttonContext.parentElement) {
        // Go up two levels to likely find a container
        targetElement = buttonContext.parentElement.parentElement;
      }
    } else {
      // Try to find by attribute
      const button = document.querySelector(`[data-chart="${elementType}"]`);
      console.log('Looking for button with data-chart:', elementType, button);
      
      if (button) {
        // Try to find the parent card or section
        targetElement = button.closest('.card') || button.closest('section') || button.closest('.row');
        console.log('Found parent element:', targetElement);
      }
    }
    
    if (!targetElement) {
      console.error('Could not find element to capture for:', elementType);
      showError("Could not find the element to capture. Please try again.");
      return;
    }
    
    // Proceed with showing the modal and capturing the element
    showShareModal(targetElement, title);
  }
  
  // Show modal and capture the element
  function showShareModal(element, title) {
    // Show the modal
    let shareModal = null;
    if (typeof bootstrap !== 'undefined') {
      shareModal = new bootstrap.Modal(document.getElementById('shareModal'));
      shareModal.show();
    } else if (typeof $ !== 'undefined' && $.fn.modal) {
      $('#shareModal').modal('show');
    } else {
      document.getElementById('shareModal').style.display = 'block';
    }
    
    // Show loading, hide content and errors
    document.getElementById('shareLoading').style.display = 'block';
    document.getElementById('shareContent').style.display = 'none';
    document.getElementById('shareError').style.display = 'none';
    
    // Capture the element with a delay to let modal open
    setTimeout(() => {
      captureElementAsImage(element, title);
    }, 300);
  }
  
  // Capture an element as an image
  function captureElementAsImage(element, title) {
    try {
      // Create a clean clone
      const clone = element.cloneNode(true);
      const container = document.createElement('div');
      container.style.position = 'absolute';
      container.style.left = '-9999px';
      container.style.width = element.offsetWidth + 'px';
      container.appendChild(clone);
      document.body.appendChild(container);
      
      // Clean up UI elements
      clone.querySelectorAll('.share-chart-btn, .btn-sm, .spinner-border, .spinner-grow, [role="status"]').forEach(el => {
        el.remove();
      });
      
      // Add styling for capture
      clone.style.backgroundColor = '#ffffff';
      clone.style.padding = '20px';
      clone.style.borderRadius = '8px';
      
      // Add title and watermark
      const titleElement = document.createElement('div');
      titleElement.textContent = title;
      titleElement.style.fontSize = '18px';
      titleElement.style.fontWeight = 'bold';
      titleElement.style.marginBottom = '15px';
      titleElement.style.textAlign = 'center';
      titleElement.style.color = '#333333';
      clone.insertBefore(titleElement, clone.firstChild);
      
      const watermark = document.createElement('div');
      watermark.textContent = 'Generated with Tea Tracker';
      watermark.style.position = 'absolute';
      watermark.style.bottom = '10px';
      watermark.style.right = '20px';
      watermark.style.fontSize = '12px';
      watermark.style.color = '#888888';
      clone.appendChild(watermark);
      
      // Use html2canvas to capture
      const options = {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        logging: false
      };
      
      html2canvas(clone, options).then(canvas => {
        // Clean up the clone
        if (container.parentNode) {
          container.parentNode.removeChild(container);
        }
        
        // Store the image data
        window.capturedImageData = canvas.toDataURL('image/png');
        
        // Update the preview
        const preview = document.getElementById('sharePreview');
        preview.innerHTML = '';
        
        // Create container for the image
        const imageContainer = document.createElement('div');
        imageContainer.style.boxShadow = '0 4px 8px rgba(0,0,0,0.1)';
        imageContainer.style.borderRadius = '8px';
        imageContainer.style.overflow = 'hidden';
        imageContainer.style.margin = '0 auto';
        imageContainer.style.maxWidth = '100%';
        
        // Add the image to the container
        const img = document.createElement('img');
        img.src = window.capturedImageData;
        img.style.width = '100%';
        img.style.height = 'auto';
        img.style.display = 'block';
        
        imageContainer.appendChild(img);
        preview.appendChild(imageContainer);
        
        // Show content, hide loading
        document.getElementById('shareLoading').style.display = 'none';
        document.getElementById('shareContent').style.display = 'block';
      }).catch(error => {
        console.error('Error capturing image:', error);
        showError('Failed to generate the image. Please try again.');
        document.getElementById('shareLoading').style.display = 'none';
      });
    } catch (error) {
      console.error('Error in capture process:', error);
      showError('An error occurred while preparing the image.');
      document.getElementById('shareLoading').style.display = 'none';
    }
  }
  
  // Set up modal action buttons
  function setupModalActionButtons() {
    // Download image
    document.getElementById('downloadAsImage').addEventListener('click', function() {
      if (!window.capturedImageData) return;
      
      const link = document.createElement('a');
      link.href = window.capturedImageData;
      link.download = 'tea-tracker-image.png';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    });
    
    // Copy to clipboard
    document.getElementById('copyToClipboard').addEventListener('click', function() {
      if (!window.capturedImageData) return;
      
      // Create a canvas element
      const img = new Image();
      img.onload = function() {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        
        // Copy to clipboard
        canvas.toBlob(blob => {
          try {
            navigator.clipboard.write([
              new ClipboardItem({
                'image/png': blob
              })
            ]).then(() => {
              showSuccess('Image copied to clipboard!');
            }).catch(err => {
              console.error('Clipboard error:', err);
              showError('Could not copy to clipboard. Try downloading instead.');
            });
          } catch (err) {
            console.error('Clipboard API not available:', err);
            showError('Your browser does not support copying images. Try downloading instead.');
          }
        });
      };
      img.src = window.capturedImageData;
    });
    
    // Social sharing
    document.getElementById('shareFacebook').addEventListener('click', function() {
      shareToSocial('facebook');
    });
  
    document.getElementById('shareTwitter').addEventListener('click', function() {
      shareToSocial('twitter');
    });
  
    document.getElementById('shareWhatsApp').addEventListener('click', function() {
      shareToSocial('whatsapp');
    });
    
    document.getElementById('shareEmail').addEventListener('click', function() {
      shareToSocial('email');
    });
  }
  
  // Share to social media
  function shareToSocial(platform) {
    if (!window.capturedImageData) return;
    
    const shareTitle = 'Check out my tea collection!';
    const shareUrl = window.location.href;
    
    // Use Web Share API if available
    if (navigator.share && platform !== 'email') {
      navigator.share({
        title: shareTitle,
        url: shareUrl
      }).catch(console.error);
      return;
    }
    
    // Platform-specific sharing
    let shareLink;
    switch (platform) {
      case 'facebook':
        shareLink = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;
        break;
      case 'twitter':
        shareLink = `https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareTitle)}`;
        break;
      case 'whatsapp':
        shareLink = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareTitle + ' ' + shareUrl)}`;
        break;
      case 'email':
        shareLink = `mailto:?subject=${encodeURIComponent(shareTitle)}&body=${encodeURIComponent('Check out my tea collection: ' + shareUrl)}`;
        break;
    }
          
    if (shareLink) {
      window.open(shareLink, '_blank');
    }
  }
  
  // Show error message
  function showError(message) {
    const errorElement = document.getElementById('shareError');
    errorElement.textContent = message;
    errorElement.style.display = 'block';
  }
  
  // Show success message as alert
  function showSuccess(message) {
    const errorElement = document.getElementById('shareError');
    errorElement.textContent = message;
    errorElement.classList.remove('alert-danger');
    errorElement.classList.add('alert-success');
    errorElement.style.display = 'block';
    
    setTimeout(() => {
      errorElement.style.display = 'none';
    }, 3000);
  }
</script>
