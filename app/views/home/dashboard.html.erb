<h1 class="mt-5 text-center">Welcome to Tea Tracker</h1>
<% if current_user %>
<div class="container-fluid py-4">
  <!-- Theme Styles -->
  <style>
    :root {
      --chart-text-color: #333333;
      --font-family: system-ui, -apple-system, 'Segoe UI', Roboto, sans-serif;
    }
    
    body, .card, .card-body, h1, h2, h3, h4, h5, h6, p, button, input, select, .btn {
      font-family: var(--font-family) !important;
    }
    
    /* Theme Styles */
    body.theme-dark {
      background-color: #2c3e50;
      color: #e0e0e0;
    }
    
    body.theme-dark .card {
      background-color: #34495e;
      border-color: #2c3e50;
    }
    
    body.theme-dark .card-header {
      border-color: #2c3e50;
    }
    
    body.theme-dark .text-muted {
      color: #a0aec0 !important;
    }
    
    body.theme-pastel {
      background-color: #f8f9fa;
      color: #5a6268;
    }
    
    body.theme-pastel .card {
      background-color: #ffffff;
      border-color: #e9ecef;
    }
    
    body.theme-pastel .card-header.bg-primary {
      background-color: #a8d8ff !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-success {
      background-color: #c3e6cb !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-info {
      background-color: #bee5eb !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-warning {
      background-color: #ffeeba !important;
      color: #212529 !important;
    }
    
    body.theme-pastel .card-header.bg-danger {
      background-color: #f5c6cb !important;
      color: #212529 !important;
    }
    
    /* Transition effects */
    body, .card, .card-header {
      transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }
    
    /* Custom font loading */
    @import url('https://fonts.googleapis.com/css2?family=Lato:wght@400;700&family=Montserrat:wght@400;700&family=Open+Sans:wght@400;700&family=Roboto:wght@400;700&display=swap');
  </style>

  <!-- User Profile Section -->
  <div class="d-flex justify-content-end mb-3">
    <button id="toggleCustomizePanel" class="btn btn-outline-primary me-2">
      <i class="bi bi-palette"></i> Customize Dashboard
    </button>
    <button id="shareDashboardBtn" class="btn btn-outline-success">
      <i class="bi bi-share"></i> Share Dashboard
    </button>
  </div>
  
  <!-- Customization Panel -->
  <div id="customizePanel" class="card shadow-sm mb-4" style="display: none;">
    <div class="card-header bg-light">
      <h5 class="mb-0">Customize Your Dashboard</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-4">
          <h6>Dashboard Theme</h6>
          <div class="d-flex flex-wrap gap-2 mb-3">
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeDefault" value="default" checked>
              <label class="form-check-label" for="themeDefault">Default</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeDark" value="dark">
              <label class="form-check-label" for="themeDark">Dark</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themePastel" value="pastel">
              <label class="form-check-label" for="themePastel">Pastel</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input" type="radio" name="dashboardTheme" id="themeVivid" value="vivid">
              <label class="form-check-label" for="themeVivid">Vivid</label>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="cardHeadersColor" class="form-label">Card Headers Style</label>
            <select class="form-select" id="cardHeadersStyle">
              <option value="default" selected>Default</option>
              <option value="solid">Solid Colors</option>
              <option value="gradient">Gradient</option>
              <option value="subtle">Subtle</option>
              <option value="monochrome">Monochrome</option>
            </select>
          </div>
        </div>
        
        <div class="col-md-4">
          <h6>Chart Colors</h6>
          <div class="mb-3">
            <label for="categoryChartColors" class="form-label">Chart Colors</label>
            <select class="form-select" id="categoryChartColors">
              <option value="default" selected>Default</option>
              <option value="tea">Tea Colors</option>
              <option value="pastels">Pastel Colors</option>
              <option value="monochrome">Monochrome</option>
            </select>
          </div>
        </div>
        
        <div class="col-md-4">
          <h6>Text & Header Colors</h6>
          <div class="mb-3">
            <label for="chartTextColor" class="form-label">Chart Text Color</label>
            <input type="color" class="form-control form-control-color" id="chartTextColor" value="#333333" title="Choose chart text color">
          </div>
          <div class="mb-3">
            <label for="dashboardTitleColor" class="form-label">Dashboard Title Color</label>
            <input type="color" class="form-control form-control-color" id="dashboardTitleColor" value="#212529" title="Choose dashboard title color">
          </div>
        </div>
      </div>
      <div class="d-flex justify-content-between mt-2">
        <button id="resetCustomizations" class="btn btn-secondary">Reset to Default</button>
        <button id="saveCustomizations" class="btn btn-success">Save Preferences</button>
      </div>
    </div>
  </div>

  <!-- User Profile Section -->
  <div class="row mb-4">
    <div class="col-md-12">
      <div class="card border-0 shadow-sm">
        <div class="card-body text-center">
          <% if current_user.avatar_url.present? %>
            <img src="<%= current_user.avatar_url %>" class="rounded-circle mb-3" alt="Avatar" width="120">
          <% end %>
          <h2 class="mb-1"><%= current_user.username %>'s Tea Collection</h2>
          <p class="text-muted"><%= current_user.bio %></p>

          <div class="d-flex justify-content-center gap-2 mt-3">
            <%= link_to "Add New Tea", new_tea_path, class: "btn btn-success" %>
            <%= link_to "View Collection", teas_path, class: "btn btn-primary" %>
            <%= link_to "Tea Analytics", tea_analytics_path, class: "btn btn-info" %>
            <%= link_to "Logout", logout_path, method: :delete, class: "btn btn-outline-danger" %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Tea Categories Breakdown -->
  <div class="row mb-4">
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header bg-success text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Tea Categories</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="categoriesSection" data-title="My Tea Categories">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <% @tea_type_counts.each do |category, count| %>
            <div class="d-flex align-items-center mb-3">
              <div class="me-3 text-end" style="width: 100px;">
                <strong><%= category %></strong>
              </div>
              <div class="progress flex-grow-1" style="height: 25px;">
                <div class="progress-bar bg-success" role="progressbar"
                     style="width: <%= (count.to_f / @tea_type_counts.values.sum) * 100 %>%;"
                     aria-valuenow="<%= count %>" aria-valuemin="0" aria-valuemax="<%= @tea_type_counts.values.sum %>">
                  <%= count %> (<%= ((count.to_f / @tea_type_counts.values.sum) * 100).round(1) %>%)
                </div>
              </div>
            </div>
          <% end %>
          <div class="text-end mt-3">
            <%= link_to "View by Category", categories_path, class: "btn btn-sm btn-outline-success" %>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="card shadow-sm h-100">
        <div class="card-header bg-primary text-white">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Tea Origins</h5>
            <button class="btn btn-sm btn-light share-chart-btn" data-chart="originsSection" data-title="My Tea Origins">
              <i class="bi bi-share"></i> Share
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="list-group">
            <% @popular_ship_from.each do |location, count| %>
              <div class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                  <i class="bi bi-geo-alt me-2"></i>
                  <%= location %>
                </div>
                <span class="badge bg-primary rounded-pill"><%= count %> teas</span>
              </div>
            <% end %>
          </div>
          <div class="text-end mt-3">
            <%= link_to "View by Origin", origins_path, class: "btn btn-sm btn-outline-primary" %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Tea Collection Summary -->
  <div class="row mb-4">
    <div class="col-md-12">
      <div class="d-flex justify-content-between align-items-center">
        <h3 class="border-bottom pb-2 mb-3">Your Tea Collection at a Glance</h3>
        <button class="btn btn-sm btn-outline-primary share-chart-btn" data-chart="teaSummarySection" data-title="My Tea Collection Summary">
          <i class="bi bi-share"></i> Share Stats
        </button>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-success text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= @total_teas %></h1>
          <p class="mb-0">Unique Teas</p>
        </div>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-primary text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= @tea_type_counts.keys.count %></h1>
          <p class="mb-0">Tea Categories</p>
        </div>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-warning text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= number_to_currency(@average_tea_cost) %></h1>
          <p class="mb-0">Avg. Cost</p>
        </div>
      </div>
    </div>

    <div class="col-md-3">
      <div class="card bg-info text-white h-100">
        <div class="card-body text-center">
          <h1 class="display-4 mb-0"><%= @popular_ship_from.keys.count %></h1>
          <p class="mb-0">Origins</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Tea Highlights -->
  <div class="row mb-4 tea-highlights-row">
    <div class="col-md-12">
      <h3 class="border-bottom pb-2 mb-3">Tea Highlights</h3>
    </div>

    <!-- Top Ranked Tea -->
    <div class="col-md-4">
      <div class="card shadow-sm h-100 tea-highlight-card">
        <div class="card-header bg-secondary text-white">
          <h5 class="mb-0">Top Ranked Tea</h5>
        </div>
        <div class="card-body d-flex flex-column align-items-center justify-content-between">
          <% if @top_ranked_tea %>
            <div class="text-center mb-3">
              <h4 class="mb-1"><%= @top_ranked_tea.year %> <%= @top_ranked_tea.name %></h4>
              <p class="text-muted mb-3"><%= @top_ranked_tea.category %></p>
            </div>

            <div class="tea-rating my-3">
              <div class="progress mb-2" style="height: 8px; width: 150px;">
                <div class="progress-bar bg-success" role="progressbar"
                     style="width: <%= (@top_entry.rank.to_f) %>%;" 
                     aria-valuenow="<%= @top_entry.rank %>" aria-valuemin="0" aria-valuemax="100">
                </div>
              </div>
              <p class="text-center">Rank: <%= @top_entry.rank %>/<%= @total_teas%></p>
            </div>

            <div class="mt-auto">
              <%= link_to "View Details", tea_path(@top_ranked_tea), class: "btn btn-sm btn-outline-secondary" %>
            </div>
          <% else %>
            <p class="text-muted">No ranked teas yet.</p>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Premium Selection -->
    <div class="col-md-4">
      <div class="card shadow-sm h-100 tea-highlight-card">
        <div class="card-header bg-danger text-white">
          <h5 class="mb-0">Premium Selection</h5>
        </div>
        <div class="card-body d-flex flex-column align-items-center justify-content-between">
          <% if @most_expensive_tea %>
            <div class="text-center mb-3">
              <h4 class="mb-1"><%= @most_expensive_tea.year %> <%= @most_expensive_tea.name %></h4>
              <p class="text-muted mb-3"><%= @most_expensive_tea.category %></p>
            </div>

            <div class="my-3 text-center">
              <h3 class="text-danger mb-2"><%= number_to_currency(@most_expensive_tea.price) %>/g</h3>
              <p class="">From <%= @most_expensive_tea.vendor %></p>
            </div>

            <div class="mt-auto">
              <%= link_to "View Details", tea_path(@most_expensive_tea), class: "btn btn-sm btn-outline-danger" %>
            </div>
          <% else %>
            <p class="text-muted">No teas with a price yet.</p>
          <% end %>
        </div>
      </div>
    </div>

    <!-- Hidden Gem -->
    <div class="col-md-4">
      <div class="card shadow-sm h-100 tea-highlight-card">
        <div class="card-header bg-dark text-white">
          <h5 class="mb-0">Hidden Gem</h5>
        </div>
        <div class="card-body d-flex flex-column align-items-center justify-content-between">
          <% if @least_popular_tea %>
            <div class="text-center mb-3">
              <h4 class="mb-1"><%= @least_popular_tea.year %> <%= @least_popular_tea.name %></h4>
              <p class="text-muted mb-3"><%= @least_popular_tea.category %></p>
            </div>

            <div class="my-3">
              <div class="progress mb-2" style="height: 8px; width: 150px;">
                <div class="progress-bar bg-dark" role="progressbar"
                     style="width: <%= (@least_popular_tea.popularity.to_f) %>%;" 
                     aria-valuenow="<%= @least_popular_tea.popularity %>" aria-valuemin="0" aria-valuemax="100">
                </div>
              </div>
              <p class="text-center">Popularity: <%= @least_popular_tea.popularity %>/<%= @total_teas%></p>
              <p class="small text-center">Vendor: <%= @least_popular_tea.vendor %></p>
            </div>

            <div class="mt-auto">
              <%= link_to "View Details", tea_path(@least_popular_tea), class: "btn btn-sm btn-outline-dark" %>
            </div>
          <% else %>
            <p class="text-muted">No teas with a popularity score yet.</p>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Additional Tea Stats -->
  <div class="row mb-4">

    <div class="col-md-6">
      <div class="card text-center shadow-sm h-100">
        <div class="card-header bg-success text-white">
          <h5 class="mb-0">Most Expensive Tea</h5>
        </div>
        <div class="card-body">
          <% most_expensive = @teas.order(price: :desc).first %>
          <% if most_expensive %>
            <h4 class="mb-2"><%= most_expensive.name %></h4>
            <p class="text-muted mb-3"><%= most_expensive.category %></p>
            <h3 class="text-success mb-0">
              <%= number_to_currency(most_expensive.price) %>
            </h3>
          <% else %>
            <p class="text-muted">No teas available</p>
          <% end %>
        </div>
      </div>
    </div>

    <div class="col-md-6">
      <div class="card text-center shadow-sm h-100">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">Least Popular Tea</h5>
        </div>
        <div class="card-body">
          <% least_popular = @teas.order(popularity: :asc).first %>
          <% if least_popular %>
            <h4 class="mb-2"><%= least_popular.name %></h4>
            <p class="text-muted mb-3"><%= least_popular.category %></p>
            <div class="progress mb-2" style="height: 8px; width: 150px; margin: 0 auto;">
              <div class="progress-bar bg-primary" role="progressbar"
                   style="width: <%= (least_popular.popularity.to_f) %>%;" 
                   aria-valuenow="<%= least_popular.popularity %>" aria-valuemin="0" aria-valuemax="100">
              </div>
            </div>
            <p>Popularity Score: <%= least_popular.popularity %>/<%= @total_teas%></p>
          <% else %>
            <p class="text-muted">No teas available</p>
          <% end %>
        </div>
      </div>
    </div>
  </div>

<!-- === Your Price Distribution ================================ -->
<div class="card shadow-sm mb-4">
  <div class="card-header bg-info text-white">
    <div class="d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Your Price Distribution</h5>
      <button class="btn btn-sm btn-light share-chart-btn" data-chart="priceChart" data-title="My Tea Price Distribution">
        <i class="bi bi-share"></i> Share
      </button>
    </div>
  </div>

  <div class="card-body p-3">
    <div class="row">
      <div class="col-md-8">
    <div class="border rounded p-3" style="height:400px;">
      <canvas id="priceChart" style="width:100%;height:100%;"></canvas>
    </div>
      </div>
        <div class="col-md-4">
          <!-- Price Statistics -->
          <div id="price-statistics">
            <%= render partial: 'price_statistics' %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="text-center mt-4 mb-5">
    <%= link_to "View All Teas", teas_path, class: "btn btn-primary btn-lg px-4" %>
  </div>
</div>

<% else %>
  <p class="text-center">
    <%= link_to "Login", new_session_path %> or
    <%= link_to "Sign Up", new_user_path %> to get started tracking your teas.
  </p>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const teaData = <%= @user_teas.to_json.html_safe %>; // [["Name", price, grams]]
  if (!teaData.length) return;

  function getPriceValue(price, grams) {
    return parseFloat(price); // Just use the raw price, no need to divide by grams
  }

  function getHistogramData() {
    const values = teaData.map(([_, price, grams]) => getPriceValue(price, grams)).filter(v => v !== null);

    const binSize = 0.1;
    const min = 0;
    const max = Math.max(...values);
    const roundedMax = Math.ceil(max); // for axis

    const bins = [];
    const binCounts = [];

    for (let b = min; b < roundedMax; b += binSize) {
      bins.push(b + binSize / 2); // bin center
      binCounts.push(0);
    }

    teaData.forEach(([_, price, grams]) => {
      const val = getPriceValue(price, grams);
      if (val === null) return;
      const i = Math.floor((val - min) / binSize);
      if (i >= 0 && i < binCounts.length) {
        binCounts[i]++;
      }
    });

    const histogramData = bins.map((x, i) => ({
      x,
      y: binCounts[i]
    }));

    return { histogramData, bins, binSize, values, roundedMax };
  }

  function getSmoothedLine(values, minX, maxX, resolution = 200) {
    const kernel = x => {
      const bw = 0.05;
      return values.reduce((sum, v) => {
        const z = (x - v) / bw;
        return sum + Math.exp(-0.5 * z * z);
      }, 0) / (values.length * bw * Math.sqrt(2 * Math.PI));
    };

    const xPoints = [], yPoints = [];
    for (let i = 0; i < resolution; i++) {
      const x = minX + ((maxX - minX) * i) / (resolution - 1);
      xPoints.push(x);
      yPoints.push(kernel(x));
    }

    const yMax = Math.max(...yPoints);
    const scaledY = yPoints.map(y => y * (10 / yMax)); // scale to match bar height

    return xPoints.map((x, i) => ({ x, y: scaledY[i] }));
  }

  const ctx = document.getElementById('priceChart').getContext('2d');
  let chart;

  // Get theme color
  function getThemeBarColor() {
    // Get from theme or use default pink if not set
    if (window.colorThemes && document.getElementById('categoryChartColors')) {
      const colorScheme = document.getElementById('categoryChartColors').value;
      const selectedColors = window.colorThemes[colorScheme] || window.colorThemes.default;
      return selectedColors[0]; // Use first color in selected theme
    }
    
    // Default color
    return 'rgba(255, 179, 198, 0.6)';  // pink
  }

  // Make renderChart available globally
  window.renderChart = function() {
    const { histogramData, bins, binSize, values, roundedMax } = getHistogramData();
    const maxY = Math.ceil(Math.max(...histogramData.map(d => d.y)) / 5) * 5;
    
    // Get theme color
    const barColor = getThemeBarColor();

    const datasets = [{
      type: 'bar',
      data: histogramData,
      backgroundColor: barColor,
      borderColor: barColor.replace('0.6', '1'),
      borderWidth: 1,
      barPercentage: 1.0,
      categoryPercentage: 1.0
    }];

    const smooth = getSmoothedLine(values, 0, roundedMax);
    datasets.push({
      type: 'line',
      data: smooth,
      borderColor: barColor.replace('0.6', '1'),
      borderWidth: 2,
      fill: false,
      tension: 0.4,
      pointRadius: 0,
      order: 1
    });

    if (chart) chart.destroy();

    window.priceChart = new Chart(ctx, {
      type: 'bar',
      data: { datasets },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
          tooltip: { enabled: false }
        },
        scales: {
          x: {
            type: 'linear',
            min: 0,
            max: roundedMax,
            offset: false,
            title: {
              display: true,
              text: 'Price per Gram ($/g)'
            },
            ticks: {
              stepSize: 0.10,
              callback: val => `$${val.toFixed(2)}`
            },
            grid: {
              drawTicks: true,
              drawOnChartArea: true,
              tickLength: 8,
              borderDash: []
            }
          },
          y: {
            beginAtZero: true,
            suggestedMax: maxY,
            title: {
              display: true,
              text: 'Number of Teas'
            },
            ticks: {
              stepSize: 5,
              callback: val => val
            }
          }
        }
      }
    });
    
    return window.priceChart;
  };

  // Initial render on page load
  window.renderChart();
  
  // Dashboard Customization Feature
  // Color theme palettes
  window.colorThemes = {
    default: [
      'rgba(54, 162, 235, 0.6)', // blue
      'rgba(255, 99, 132, 0.6)', // pink
      'rgba(75, 192, 192, 0.6)', // green
      'rgba(255, 206, 86, 0.6)', // yellow
      'rgba(153, 102, 255, 0.6)', // purple
      'rgba(255, 159, 64, 0.6)'  // orange
    ],
    tea: [
      'rgba(183, 110, 39, 0.6)',  // brown
      'rgba(104, 160, 99, 0.6)',  // green
      'rgba(196, 145, 2, 0.6)',   // yellow
      'rgba(181, 71, 82, 0.6)',   // red
      'rgba(76, 40, 30, 0.6)',    // dark brown
      'rgba(192, 171, 142, 0.6)'  // beige
    ],
    pastels: [
      'rgba(255, 179, 198, 0.6)', // pink
      'rgba(181, 234, 215, 0.6)', // mint
      'rgba(255, 241, 179, 0.6)', // light yellow
      'rgba(199, 206, 234, 0.6)', // lavender
      'rgba(235, 179, 255, 0.6)', // light purple
      'rgba(181, 228, 255, 0.6)'  // sky blue
    ],
    monochrome: [
      'rgba(44, 62, 80, 0.8)',
      'rgba(44, 62, 80, 0.7)',
      'rgba(44, 62, 80, 0.6)', 
      'rgba(44, 62, 80, 0.5)',
      'rgba(44, 62, 80, 0.4)',
      'rgba(44, 62, 80, 0.3)'
    ]
  };
  
  const customizePanel = document.getElementById('customizePanel');
  const toggleCustomizePanel = document.getElementById('toggleCustomizePanel');
  
  // Apply preferences to dashboard
  function applyPreferences() {
    // Get current preferences
    const theme = document.querySelector('input[name="dashboardTheme"]:checked').value;
    const categoryColors = document.getElementById('categoryChartColors').value;
    const textColor = document.getElementById('chartTextColor').value;
    const headerStyle = document.getElementById('cardHeadersStyle').value;
    const titleColor = document.getElementById('dashboardTitleColor')?.value || '#212529';
    
    // Apply theme
    applyTheme(theme);
    
    // Apply card header styles
    updateCardHeadersAndStats(headerStyle);
    
    // Update dashboard title color
    const dashboardTitle = document.querySelector('h1.mt-5.text-center');
    if (dashboardTitle) {
      dashboardTitle.style.color = titleColor;
    }
    
    // Re-render charts with new colors
    updateChartColors(categoryColors, textColor);
  }
  
  // Update card headers and statistic cards
  function updateCardHeadersAndStats(style) {
    const headers = document.querySelectorAll('.card-header');
    const statCards = document.querySelectorAll('.row .card.bg-success, .row .card.bg-primary, .row .card.bg-warning, .row .card.bg-info');
    const progressBars = document.querySelectorAll('.progress-bar');
    const selectedColors = window.colorThemes[document.getElementById('categoryChartColors').value] || window.colorThemes.default;
    
    // Reset headers to default first
    headers.forEach(header => {
      header.style.background = '';
      header.style.borderBottom = '';
      header.style.color = '';
    });
    
    // Reset stat cards first
    statCards.forEach(card => {
      if (!card.classList.contains('bg-success') && 
          !card.classList.contains('bg-primary') && 
          !card.classList.contains('bg-warning') && 
          !card.classList.contains('bg-info')) return;
          
      card.style.background = '';
      card.style.backgroundColor = '';
      card.style.color = '';
    });
    
    // Apply header styles
    if (style === 'solid') {
      // Solid vibrant colors
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '1');
        header.style.backgroundColor = color;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const colorIdx = i % selectedColors.length;
        card.style.backgroundColor = selectedColors[colorIdx].replace('0.6', '0.9');
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const colorIdx = i % selectedColors.length;
        bar.style.backgroundColor = selectedColors[colorIdx].replace('0.6', '0.8');
      });
    } 
    else if (style === 'gradient') {
      // Gradient backgrounds
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const startColor = selectedColors[colorIdx].replace('0.6', '0.9');
        const endColor = selectedColors[(i+1) % selectedColors.length].replace('0.6', '0.7');
        header.style.background = `linear-gradient(135deg, ${startColor}, ${endColor})`;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const colorIdx = i % selectedColors.length;
        const startColor = selectedColors[colorIdx].replace('0.6', '0.9');
        const endColor = selectedColors[(i+1) % selectedColors.length].replace('0.6', '0.7');
        card.style.background = `linear-gradient(135deg, ${startColor}, ${endColor})`;
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const colorIdx = i % selectedColors.length;
        const startColor = selectedColors[colorIdx].replace('0.6', '0.8');
        const endColor = selectedColors[(i+1) % selectedColors.length].replace('0.6', '0.6');
        bar.style.background = `linear-gradient(90deg, ${startColor}, ${endColor})`;
      });
    }
    else if (style === 'subtle') {
      // Subtle backgrounds with border
      headers.forEach((header, i) => {
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '0.3');
        const borderColor = selectedColors[colorIdx].replace('0.6', '0.8');
        header.style.backgroundColor = color;
        header.style.borderBottom = `2px solid ${borderColor}`;
        header.style.color = '#333333';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const colorIdx = i % selectedColors.length;
        const color = selectedColors[colorIdx].replace('0.6', '0.7');
        card.style.backgroundColor = color;
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const colorIdx = i % selectedColors.length;
        bar.style.backgroundColor = selectedColors[colorIdx].replace('0.6', '0.8');
      });
    }
    else if (style === 'monochrome') {
      // Monochrome with different shade levels
      headers.forEach((header, i) => {
        const shade = 0.2 + (i % 5) * 0.1; // 0.2, 0.3, 0.4, 0.5, 0.6
        header.style.backgroundColor = `rgba(33, 37, 41, ${shade})`;
        header.style.color = '#ffffff';
        header.style.borderBottom = 'none';
      });
      
      // Apply to stat cards
      statCards.forEach((card, i) => {
        if (!card.classList.contains('bg-success') && 
            !card.classList.contains('bg-primary') && 
            !card.classList.contains('bg-warning') && 
            !card.classList.contains('bg-info')) return;
            
        const shade = 0.5 + (i % 4) * 0.1; // 0.5, 0.6, 0.7, 0.8
        card.style.backgroundColor = `rgba(33, 37, 41, ${shade})`;
        card.style.color = '#ffffff';
      });
      
      // Apply to progress bars
      progressBars.forEach((bar, i) => {
        const shade = 0.5 + (i % 5) * 0.1; // 0.5, 0.6, 0.7, 0.8, 0.9
        bar.style.backgroundColor = `rgba(33, 37, 41, ${shade})`;
      });
    }
  }
  
  // Apply overall theme
  function applyTheme(theme) {
    const root = document.documentElement;
    const cardHeaders = document.querySelectorAll('.card-header');
    const cards = document.querySelectorAll('.card');
    const textColor = document.getElementById('chartTextColor').value;
    
    // Reset previous theme classes
    document.body.classList.remove('theme-dark', 'theme-pastel', 'theme-vivid');
    
    if (theme === 'dark') {
      document.body.classList.add('theme-dark');
      root.style.setProperty('--chart-text-color', '#e0e0e0');
      document.body.style.backgroundColor = '#2c3e50';
      document.body.style.color = '#e0e0e0';
      
      cards.forEach(card => {
        card.style.backgroundColor = '#34495e';
        card.style.borderColor = '#2c3e50';
      });
      
    } else if (theme === 'pastel') {
      document.body.classList.add('theme-pastel');
      root.style.setProperty('--chart-text-color', '#5a6268');
      document.body.style.backgroundColor = '#f8f9fa';
      
      cards.forEach(card => {
        card.style.backgroundColor = '#ffffff';
        card.style.borderColor = '#e9ecef';
      });
      
    } else if (theme === 'vivid') {
      document.body.classList.add('theme-vivid');
      root.style.setProperty('--chart-text-color', '#212529');
      document.body.style.backgroundColor = '#ffffff';
      
      cardHeaders.forEach(header => {
        // Make card headers more vibrant
        if (header.classList.contains('bg-primary')) header.style.backgroundColor = '#007bff';
        if (header.classList.contains('bg-success')) header.style.backgroundColor = '#28a745'; 
        if (header.classList.contains('bg-info')) header.style.backgroundColor = '#17a2b8';
        if (header.classList.contains('bg-warning')) header.style.backgroundColor = '#ffc107';
        if (header.classList.contains('bg-danger')) header.style.backgroundColor = '#dc3545';
      });
      
    } else {
      // Default theme
      root.style.setProperty('--chart-text-color', '#333333');
      document.body.style.backgroundColor = '';
      document.body.style.color = '';
      
      cards.forEach(card => {
        card.style.backgroundColor = '';
        card.style.borderColor = '';
      });
      
      cardHeaders.forEach(header => {
        header.style.backgroundColor = '';
      });
    }
    
    // Apply text color consistently to chart options
    Chart.defaults.color = textColor;
    Chart.defaults.plugins.legend.labels.color = textColor;
    Chart.defaults.plugins.title.color = textColor;
  }
  
  // Update chart colors based on selection
  function updateChartColors(colorScheme, textColor = '#333333') {
    const selectedColors = window.colorThemes[colorScheme] || window.colorThemes.default;
    
    // Set global chart text color
    Chart.defaults.color = textColor;
    Chart.defaults.plugins.legend.labels.color = textColor;
    Chart.defaults.plugins.title.color = textColor;
    
    // Update price chart (histogram) if it exists
    if (window.priceChart && typeof window.priceChart.data !== 'undefined') {
      const chart = window.priceChart;
      
      // Get theme color
      const barColor = selectedColors[0];
      
      // Update the colors of the bar chart
      if (chart.data && chart.data.datasets && chart.data.datasets.length > 0) {
        // First dataset is the bar chart
        chart.data.datasets[0].backgroundColor = barColor;
        chart.data.datasets[0].borderColor = barColor.replace('0.6', '1');
        
        // Second dataset is the line chart
        if (chart.data.datasets.length > 1) {
          chart.data.datasets[1].borderColor = barColor.replace('0.6', '1');
        }
      }
      
      // Update text colors
      if (chart.options && chart.options.scales) {
        if (chart.options.scales.x) {
          chart.options.scales.x.ticks.color = textColor;
          if (chart.options.scales.x.title) chart.options.scales.x.title.color = textColor;
        }
        if (chart.options.scales.y) {
          chart.options.scales.y.ticks.color = textColor;
          if (chart.options.scales.y.title) chart.options.scales.y.title.color = textColor;
        }
      }
      
      chart.update();
    } else {
      // If chart doesn't exist yet, just re-render it
      if (window.renderChart && typeof window.renderChart === 'function') {
        window.renderChart();
      }
    }
  }
  
  // Save preferences to localStorage
  function savePreferences() {
    try {
      const prefs = {
        dashboardTheme: document.querySelector('input[name="dashboardTheme"]:checked').value,
        categoryChartColors: document.getElementById('categoryChartColors').value,
        chartTextColor: document.getElementById('chartTextColor').value,
        cardHeadersStyle: document.getElementById('cardHeadersStyle').value,
        dashboardTitleColor: document.getElementById('dashboardTitleColor')?.value || '#212529'
      };
      
      localStorage.setItem('teaTrackerDashboardPrefs', JSON.stringify(prefs));
      
      // Show save confirmation
      const saveBtn = document.getElementById('saveCustomizations');
      const originalText = saveBtn.textContent;
      saveBtn.textContent = 'Saved!';
      saveBtn.classList.remove('btn-success');
      saveBtn.classList.add('btn-info');
      
      setTimeout(() => {
        saveBtn.textContent = originalText;
        saveBtn.classList.remove('btn-info');
        saveBtn.classList.add('btn-success');
      }, 2000);
      
    } catch (e) {
      console.error('Error saving preferences:', e);
    }
  }
  
  // Load saved preferences from localStorage
  function loadPreferences() {
    try {
      const savedPrefs = localStorage.getItem('teaTrackerDashboardPrefs');
      if (savedPrefs) {
        const prefs = JSON.parse(savedPrefs);
        
        // Apply theme
        document.querySelector(`input[name="dashboardTheme"][value="${prefs.dashboardTheme || 'default'}"]`).checked = true;
        
        // Apply chart colors
        if (prefs.categoryChartColors) {
          document.getElementById('categoryChartColors').value = prefs.categoryChartColors;
        }
        
        // Apply text color
        if (prefs.chartTextColor) {
          document.getElementById('chartTextColor').value = prefs.chartTextColor;
        }
        
        // Apply card header style
        if (prefs.cardHeadersStyle) {
          document.getElementById('cardHeadersStyle').value = prefs.cardHeadersStyle;
        }
        
        // Apply dashboard title color
        if (prefs.dashboardTitleColor && document.getElementById('dashboardTitleColor')) {
          document.getElementById('dashboardTitleColor').value = prefs.dashboardTitleColor;
        }
        
        // Apply all preferences
        applyPreferences();
      }
    } catch (e) {
      console.error('Error loading preferences:', e);
    }
  }
  
  // Event Listeners
  toggleCustomizePanel.addEventListener('click', () => {
    if (customizePanel.style.display === 'none') {
      customizePanel.style.display = 'block';
      toggleCustomizePanel.innerHTML = '<i class="bi bi-x-lg"></i> Close Customization';
      toggleCustomizePanel.classList.replace('btn-outline-primary', 'btn-outline-secondary');
    } else {
      customizePanel.style.display = 'none';
      toggleCustomizePanel.innerHTML = '<i class="bi bi-palette"></i> Customize Dashboard';
      toggleCustomizePanel.classList.replace('btn-outline-secondary', 'btn-outline-primary');
    }
  });
  
  document.getElementById('saveCustomizations').addEventListener('click', () => {
    applyPreferences();
    savePreferences();
  });
  
  document.getElementById('resetCustomizations').addEventListener('click', () => {
    // Reset form to defaults
    document.getElementById('themeDefault').checked = true;
    document.getElementById('categoryChartColors').value = 'default';
    document.getElementById('chartTextColor').value = '#333333';
    document.getElementById('cardHeadersStyle').value = 'default';
    if (document.getElementById('dashboardTitleColor')) {
      document.getElementById('dashboardTitleColor').value = '#212529';
    }
    
    // Apply defaults
    applyPreferences();
    savePreferences();
  });
  
  // Apply changes in real-time for instant preview
  document.querySelectorAll('input[name="dashboardTheme"]').forEach(radio => {
    radio.addEventListener('change', applyPreferences);
  });
  
  document.getElementById('categoryChartColors').addEventListener('change', applyPreferences);
  document.getElementById('chartTextColor').addEventListener('change', applyPreferences);
  document.getElementById('cardHeadersStyle').addEventListener('change', applyPreferences);
  if (document.getElementById('dashboardTitleColor')) {
    document.getElementById('dashboardTitleColor').addEventListener('change', applyPreferences);
  }
  
  // Load preferences on page load
  loadPreferences();
});
</script>

<!-- Sharing Modal -->
<div class="modal fade" id="shareModal" tabindex="-1" aria-labelledby="shareModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="shareModalLabel">Share</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="text-center mb-3">
          <div id="sharePreview" class="border rounded mb-3 mx-auto" style="max-width: 100%; overflow: hidden;">
            <!-- Preview content will be injected here -->
          </div>
          <div id="shareSpinner" class="text-center my-5 d-none">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Generating image...</p>
          </div>
        </div>
        <div class="share-options">
          <div class="d-grid gap-2">
            <button id="downloadImage" class="btn btn-primary">
              <i class="bi bi-download"></i> Download as Image
            </button>
            <button id="copyToClipboard" class="btn btn-secondary">
              <i class="bi bi-clipboard"></i> Copy to Clipboard
            </button>
            <button id="generateShareLink" class="btn btn-info">
              <i class="bi bi-link-45deg"></i> Generate Shareable Link
            </button>
            <div class="btn-group mt-2" role="group">
              <button id="shareTwitter" class="btn btn-outline-dark">
                <i class="bi bi-twitter"></i>
              </button>
              <button id="shareFacebook" class="btn btn-outline-dark">
                <i class="bi bi-facebook"></i>
              </button>
              <button id="shareReddit" class="btn btn-outline-dark">
                <i class="bi bi-reddit"></i>
              </button>
              <button id="shareWhatsApp" class="btn btn-outline-dark">
                <i class="bi bi-whatsapp"></i>
              </button>
            </div>
          </div>
        </div>
        <div id="shareLinkContainer" class="mt-3 d-none">
          <div class="input-group">
            <input type="text" id="shareLink" class="form-control" readonly>
            <button class="btn btn-outline-secondary" type="button" id="copyLinkBtn">Copy</button>
          </div>
          <small class="text-muted">This link will expire in 30 days</small>
        </div>
        <div id="shareResult" class="alert mt-3 d-none"></div>
      </div>
    </div>
  </div>
</div>

<!-- Load required libraries -->
<script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Store references to chart elements
  const chartElements = {
    priceChart: document.querySelector('.card-body .border.rounded.p-3'),
    categoriesSection: document.querySelector('.card-header.bg-success').closest('.card'),
    originsSection: document.querySelector('.card-header.bg-primary').closest('.card'),
    teaSummarySection: document.querySelector('.row.mb-4:nth-of-type(3)')
  };
  
  let currentShareElement = null;
  let currentShareTitle = '';
  let capturedImage = null;
  
  // Add Bootstrap icons if not already included
  if (!document.querySelector('link[href*="bootstrap-icons"]')) {
    const iconLink = document.createElement('link');
    iconLink.rel = 'stylesheet';
    iconLink.href = 'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css';
    document.head.appendChild(iconLink);
  }
  
  // Share chart button click handler
  document.querySelectorAll('.share-chart-btn').forEach(btn => {
    btn.addEventListener('click', function() {
      const chartId = this.dataset.chart;
      currentShareElement = chartElements[chartId];
      currentShareTitle = this.dataset.title;
      openShareModal();
    });
  });
  
  // Share Dashboard button click handler
  document.getElementById('shareDashboardBtn').addEventListener('click', function() {
    currentShareElement = document.querySelector('.container-fluid');
    currentShareTitle = 'My Tea Tracker Dashboard';
    openShareModal();
  });
  
  // Open share modal and capture content
  function openShareModal() {
    const modal = new bootstrap.Modal(document.getElementById('shareModal'));
    modal.show();
    captureContent();
  }
  
  // Capture content as image using html2canvas
  function captureContent() {
    if (!currentShareElement) return;
    
    const preview = document.getElementById('sharePreview');
    const spinner = document.getElementById('shareSpinner');
    
    // Clear previous content and show spinner
    preview.innerHTML = '';
    preview.style.display = 'none';
    spinner.classList.remove('d-none');
    
    // Additional style options for better image quality
    const options = {
      scale: 2, // Increase for higher resolution
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      onclone: function(clonedDoc) {
        // Add watermark to cloned element
        const watermark = clonedDoc.createElement('div');
        watermark.style.position = 'absolute';
        watermark.style.bottom = '10px';
        watermark.style.right = '10px';
        watermark.style.padding = '5px';
        watermark.style.borderRadius = '3px';
        watermark.style.backgroundColor = 'rgba(255,255,255,0.7)';
        watermark.style.fontSize = '12px';
        watermark.innerText = 'Generated with Tea Tracker';
        
        // Add title
        const title = clonedDoc.createElement('div');
        title.style.position = 'absolute';
        title.style.top = '10px';
        title.style.left = '10px';
        title.style.padding = '5px 10px';
        title.style.borderRadius = '3px';
        title.style.backgroundColor = 'rgba(255,255,255,0.9)';
        title.style.fontSize = '16px';
        title.style.fontWeight = 'bold';
        title.innerText = currentShareTitle;
        
        const clonedElement = clonedDoc.querySelector('#' + currentShareElement.id) || 
                             clonedDoc.querySelector('.' + currentShareElement.className.split(' ')[0]);
        
        if (clonedElement) {
          clonedElement.style.position = 'relative';
          clonedElement.style.overflow = 'visible';
          clonedElement.appendChild(watermark);
          clonedElement.appendChild(title);
        }
      }
    };
    
    // Capture the element as an image
    html2canvas(currentShareElement, options).then(canvas => {
      capturedImage = canvas;
      
      // Set max dimensions while maintaining aspect ratio
      const maxWidth = preview.offsetWidth;
      const scale = maxWidth / canvas.width;
      const scaledHeight = canvas.height * scale;
      
      // Resize canvas for preview
      canvas.style.width = '100%';
      canvas.style.height = 'auto';
      canvas.style.borderRadius = '4px';
      
      // Hide spinner and show preview
      spinner.classList.add('d-none');
      preview.style.display = 'block';
      preview.appendChild(canvas);
      
      // Enable share buttons now that we have an image
      enableShareButtons();
    }).catch(err => {
      console.error("Error capturing content:", err);
      showShareResult('error', 'Failed to generate image. Please try again.');
      spinner.classList.add('d-none');
    });
  }
  
  // Enable share buttons once image is generated
  function enableShareButtons() {
    document.getElementById('downloadImage').disabled = false;
    document.getElementById('copyToClipboard').disabled = false;
    document.getElementById('generateShareLink').disabled = false;
    document.getElementById('shareTwitter').disabled = false;
    document.getElementById('shareFacebook').disabled = false;
    document.getElementById('shareReddit').disabled = false;
    document.getElementById('shareWhatsApp').disabled = false;
  }
  
  // Download Image button click handler
  document.getElementById('downloadImage').addEventListener('click', function() {
    if (!capturedImage) return;
    
    capturedImage.toBlob(function(blob) {
      saveAs(blob, `${currentShareTitle.replace(/\s+/g, '_')}.png`);
      showShareResult('success', 'Image downloaded successfully!');
    });
  });
  
  // Copy to Clipboard button click handler
  document.getElementById('copyToClipboard').addEventListener('click', async function() {
    if (!capturedImage) return;
    
    try {
      const blob = await new Promise(resolve => capturedImage.toBlob(resolve));
      await navigator.clipboard.write([
        new ClipboardItem({
          [blob.type]: blob
        })
      ]);
      showShareResult('success', 'Image copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy image: ', err);
      showShareResult('error', 'Failed to copy image. Your browser may not support this feature.');
    }
  });
  
  // Generate Share Link button click handler
  document.getElementById('generateShareLink').addEventListener('click', async function() {
    if (!capturedImage) return;
    
    try {
      const linkContainer = document.getElementById('shareLinkContainer');
      const linkInput = document.getElementById('shareLink');
      
      showShareResult('info', 'Generating shareable link...');
      
      // Convert canvas to blob and upload to a service
      // This would typically call your backend API to handle storage
      // For demo purposes, we'll just simulate it with a timeout
      
      setTimeout(() => {
        // Replace with your actual API call that returns a shareable link
        const demoShareLink = `${window.location.origin}/share/${Math.random().toString(36).substring(2, 10)}`;
        
        linkInput.value = demoShareLink;
        linkContainer.classList.remove('d-none');
        
        showShareResult('success', 'Shareable link generated!');
      }, 1000);
    } catch (err) {
      console.error('Failed to generate link: ', err);
      showShareResult('error', 'Failed to generate shareable link.');
    }
  });
  
  // Copy Share Link button handler
  document.getElementById('copyLinkBtn').addEventListener('click', function() {
    const linkInput = document.getElementById('shareLink');
    linkInput.select();
    document.execCommand('copy');
    
    this.innerText = 'Copied!';
    setTimeout(() => {
      this.innerText = 'Copy';
    }, 2000);
  });
  
  // Social media share handlers
  document.getElementById('shareTwitter').addEventListener('click', function() {
    shareToSocialMedia('twitter');
  });
  
  document.getElementById('shareFacebook').addEventListener('click', function() {
    shareToSocialMedia('facebook');
  });
  
  document.getElementById('shareReddit').addEventListener('click', function() {
    shareToSocialMedia('reddit');
  });
  
  document.getElementById('shareWhatsApp').addEventListener('click', function() {
    shareToSocialMedia('whatsapp');
  });
  
  // Share to social media platforms
  function shareToSocialMedia(platform) {
    // In a real implementation, you would:
    // 1. Create a shareable link to your image
    // 2. Construct the appropriate social media share URL
    
    // For demo purposes, we'll check if Web Share API is available
    if (navigator.share && capturedImage) {
      capturedImage.toBlob(async function(blob) {
        const file = new File([blob], `${currentShareTitle.replace(/\s+/g, '_')}.png`, { type: 'image/png' });
        
        try {
          await navigator.share({
            title: currentShareTitle,
            text: 'Check out my Tea Tracker stats!',
            files: [file]
          });
          showShareResult('success', 'Content shared successfully!');
        } catch (err) {
          console.error('Error sharing:', err);
          
          // Fallback to platform-specific sharing
          let shareUrl = '';
          
          // This would be replaced with your actual shareable link in production
          const demoShareLink = `${window.location.origin}/share/${Math.random().toString(36).substring(2, 10)}`;
          
          switch (platform) {
            case 'twitter':
              shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(currentShareTitle)}&url=${encodeURIComponent(demoShareLink)}`;
              break;
            case 'facebook':
              shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(demoShareLink)}`;
              break;
            case 'reddit':
              shareUrl = `https://www.reddit.com/submit?url=${encodeURIComponent(demoShareLink)}&title=${encodeURIComponent(currentShareTitle)}`;
              break;
            case 'whatsapp':
              shareUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(currentShareTitle + ' ' + demoShareLink)}`;
              break;
          }
          
          if (shareUrl) {
            window.open(shareUrl, '_blank');
          }
        }
      });
    } else {
      // Fallback for browsers that don't support Web Share API
      showShareResult('info', 'Direct sharing not supported in your browser. Please use the "Generate Shareable Link" option instead.');
    }
  }
  
  // Display result messages
  function showShareResult(type, message) {
    const resultElement = document.getElementById('shareResult');
    
    resultElement.className = 'alert mt-3';
    resultElement.classList.add(`alert-${type === 'error' ? 'danger' : type}`);
    resultElement.textContent = message;
    resultElement.classList.remove('d-none');
    
    setTimeout(() => {
      resultElement.classList.add('d-none');
    }, 5000);
  }
});
</script>
